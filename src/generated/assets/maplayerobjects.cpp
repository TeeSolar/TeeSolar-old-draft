/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/maplayerobjects.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_MapLayerObjects::CVertex::CVertex()
{
	m_Position = 0.0f;
	m_Weight = 1.0f;
	m_Color = 1.0f;
	m_Smoothness = CBezierVertex::TYPE_CORNER;
	m_ControlPoint0 = vec2(-16.0f, 0.0f);
	m_ControlPoint1 = vec2(16.0f, 0.0f);
}

CAsset_MapLayerObjects::CObject::CObject()
{
	m_Position = 0.0f;
	m_Size = 1.0f;
	m_Angle = 0.0f;
	m_PathType = PATHTYPE_OPEN;
	m_FillType = FILLTYPE_NONE;
	m_LineType = LINETYPE_SHOW;
	m_OrthoTesselation = 1;
	m_AnimationOffset = 0;
}

CAsset_MapLayerObjects::CAsset_MapLayerObjects()
{
	m_Visibility = true;
	m_LevelOfDetail = 0;
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
}


void CAsset_MapLayerObjects::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_2_0* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_0)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
}

void CAsset_MapLayerObjects::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_2_0* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_2_0[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_0)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_0)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
}


void CAsset_MapLayerObjects::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_2_1* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_1)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
}

void CAsset_MapLayerObjects::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_2_1* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_2_1[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_1)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_1)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
}


void CAsset_MapLayerObjects::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_2_2* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_2)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
}

void CAsset_MapLayerObjects::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_2_2* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_2_2[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_2)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_2)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
}


void CAsset_MapLayerObjects::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_2_3* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
	SysType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LevelOfDetail);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_3)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
}

void CAsset_MapLayerObjects::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_2_3* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_2_3[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_3)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_3)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
	TuaType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LevelOfDetail);
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
}


void CAsset_MapLayerObjects::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_2_4* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
	SysType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LevelOfDetail);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_2_4)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
}

void CAsset_MapLayerObjects::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_2_4* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_2_4[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_4)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_2_4)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
	TuaType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LevelOfDetail);
}

void CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapLayerObjects::CVertex& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Weight = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Weight);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Smoothness = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Smoothness);
	SysType.m_ControlPoint0.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_X);
	SysType.m_ControlPoint0.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint0.m_Y);
	SysType.m_ControlPoint1.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_X);
	SysType.m_ControlPoint1.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_ControlPoint1.m_Y);
}


void CAsset_MapLayerObjects::CObject::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapLayerObjects::CObject& SysType)
{
	SysType.m_Position.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_X);
	SysType.m_Position.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Position.m_Y);
	SysType.m_Size.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_X);
	SysType.m_Size.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Size.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	pLoadingContext->ReadAssetPath(TuaType.m_StylePath, SysType.m_StylePath);
	{
		const CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0* pData = (const CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Vertex.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Vertex.m_Size);
		SysType.m_Vertex.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Vertex[i]);
		}
	}
	
	SysType.m_PathType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_PathType);
	SysType.m_FillType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_FillType);
	SysType.m_LineType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LineType);
	SysType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_OrthoTesselation);
	pLoadingContext->ReadAssetPath(TuaType.m_AnimationPath, SysType.m_AnimationPath);
	SysType.m_AnimationOffset = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_AnimationOffset);
}


void CAsset_MapLayerObjects::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_MapLayerObjects& SysType)
{
	CAsset::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ParentPath, SysType.m_ParentPath);
	{
		const CAsset_MapLayerObjects::CObject::CTuaType_0_3_0* pData = (const CAsset_MapLayerObjects::CObject::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Object.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Object.m_Size);
		SysType.m_Object.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Object[i]);
		}
	}
	
	SysType.m_Visibility = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Visibility);
	SysType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_LevelOfDetail);
}


void CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CVertex& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Weight = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Weight);
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Smoothness = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Smoothness);
	TuaType.m_ControlPoint0.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.x);
	TuaType.m_ControlPoint0.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint0.y);
	TuaType.m_ControlPoint1.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.x);
	TuaType.m_ControlPoint1.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_ControlPoint1.y);
}

void CAsset_MapLayerObjects::CObject::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects::CObject& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Position.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.x);
	TuaType.m_Position.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Position.y);
	TuaType.m_Size.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.x);
	TuaType.m_Size.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Size.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	pLoadingContext->WriteAssetPath(SysType.m_StylePath, TuaType.m_StylePath);
	{
		TuaType.m_Vertex.m_Size = SysType.m_Vertex.size();
		CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0* pData = new CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0[SysType.m_Vertex.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0)*SysType.m_Vertex.size());
		for(unsigned int i=0; i<SysType.m_Vertex.size(); i++)
		{
			CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Vertex[i], pData[i]);
		}
		TuaType.m_Vertex.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CVertex::CTuaType_0_3_0)*SysType.m_Vertex.size());
		delete[] pData;
	}
	TuaType.m_PathType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_PathType);
	TuaType.m_FillType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_FillType);
	TuaType.m_LineType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LineType);
	TuaType.m_OrthoTesselation = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_OrthoTesselation);
	pLoadingContext->WriteAssetPath(SysType.m_AnimationPath, TuaType.m_AnimationPath);
	TuaType.m_AnimationOffset = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_AnimationOffset);
}

void CAsset_MapLayerObjects::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_MapLayerObjects& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ParentPath, TuaType.m_ParentPath);
	{
		TuaType.m_Object.m_Size = SysType.m_Object.size();
		CAsset_MapLayerObjects::CObject::CTuaType_0_3_0* pData = new CAsset_MapLayerObjects::CObject::CTuaType_0_3_0[SysType.m_Object.size()];
		mem_zero((void*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_3_0)*SysType.m_Object.size());
		for(unsigned int i=0; i<SysType.m_Object.size(); i++)
		{
			CAsset_MapLayerObjects::CObject::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Object[i], pData[i]);
		}
		TuaType.m_Object.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_MapLayerObjects::CObject::CTuaType_0_3_0)*SysType.m_Object.size());
		delete[] pData;
	}
	TuaType.m_Visibility = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Visibility);
	TuaType.m_LevelOfDetail = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_LevelOfDetail);
}

template<>
int CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case OBJECT_ARRAYSIZE:
			return GetObjectArraySize();
		case OBJECT_VERTEX_ARRAYSIZE:
			return GetObjectVertexArraySize(SubPath);
		case OBJECT_VERTEX_SMOOTHNESS:
			return GetObjectVertexSmoothness(SubPath);
		case OBJECT_PATHTYPE:
			return GetObjectPathType(SubPath);
		case OBJECT_FILLTYPE:
			return GetObjectFillType(SubPath);
		case OBJECT_LINETYPE:
			return GetObjectLineType(SubPath);
		case OBJECT_ORTHOTESSELATION:
			return GetObjectOrthoTesselation(SubPath);
		case LEVELOFDETAIL:
			return GetLevelOfDetail();
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case OBJECT_ARRAYSIZE:
			SetObjectArraySize(Value);
			return true;
		case OBJECT_VERTEX_ARRAYSIZE:
			SetObjectVertexArraySize(SubPath, Value);
			return true;
		case OBJECT_VERTEX_SMOOTHNESS:
			SetObjectVertexSmoothness(SubPath, Value);
			return true;
		case OBJECT_PATHTYPE:
			SetObjectPathType(SubPath, Value);
			return true;
		case OBJECT_FILLTYPE:
			SetObjectFillType(SubPath, Value);
			return true;
		case OBJECT_LINETYPE:
			SetObjectLineType(SubPath, Value);
			return true;
		case OBJECT_ORTHOTESSELATION:
			SetObjectOrthoTesselation(SubPath, Value);
			return true;
		case LEVELOFDETAIL:
			SetLevelOfDetail(Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
int64 CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, int64 DefaultValue) const
{
	switch(ValueType)
	{
		case OBJECT_ANIMATIONOFFSET:
			return GetObjectAnimationOffset(SubPath);
	}
	return CAsset::GetValue<int64>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, int64 Value)
{
	switch(ValueType)
	{
		case OBJECT_ANIMATIONOFFSET:
			SetObjectAnimationOffset(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<int64>(ValueType, SubPath, Value);
}

template<>
bool CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, bool DefaultValue) const
{
	switch(ValueType)
	{
		case VISIBILITY:
			return GetVisibility();
	}
	return CAsset::GetValue<bool>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, bool Value)
{
	switch(ValueType)
	{
		case VISIBILITY:
			SetVisibility(Value);
			return true;
	}
	return CAsset::SetValue<bool>(ValueType, SubPath, Value);
}

template<>
float CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const
{
	switch(ValueType)
	{
		case OBJECT_POSITION_X:
			return GetObjectPositionX(SubPath);
		case OBJECT_POSITION_Y:
			return GetObjectPositionY(SubPath);
		case OBJECT_SIZE_X:
			return GetObjectSizeX(SubPath);
		case OBJECT_SIZE_Y:
			return GetObjectSizeY(SubPath);
		case OBJECT_ANGLE:
			return GetObjectAngle(SubPath);
		case OBJECT_VERTEX_POSITION_X:
			return GetObjectVertexPositionX(SubPath);
		case OBJECT_VERTEX_POSITION_Y:
			return GetObjectVertexPositionY(SubPath);
		case OBJECT_VERTEX_WEIGHT:
			return GetObjectVertexWeight(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT0_X:
			return GetObjectVertexControlPoint0X(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT0_Y:
			return GetObjectVertexControlPoint0Y(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT1_X:
			return GetObjectVertexControlPoint1X(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT1_Y:
			return GetObjectVertexControlPoint1Y(SubPath);
	}
	return CAsset::GetValue<float>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, float Value)
{
	switch(ValueType)
	{
		case OBJECT_POSITION_X:
			SetObjectPositionX(SubPath, Value);
			return true;
		case OBJECT_POSITION_Y:
			SetObjectPositionY(SubPath, Value);
			return true;
		case OBJECT_SIZE_X:
			SetObjectSizeX(SubPath, Value);
			return true;
		case OBJECT_SIZE_Y:
			SetObjectSizeY(SubPath, Value);
			return true;
		case OBJECT_ANGLE:
			SetObjectAngle(SubPath, Value);
			return true;
		case OBJECT_VERTEX_POSITION_X:
			SetObjectVertexPositionX(SubPath, Value);
			return true;
		case OBJECT_VERTEX_POSITION_Y:
			SetObjectVertexPositionY(SubPath, Value);
			return true;
		case OBJECT_VERTEX_WEIGHT:
			SetObjectVertexWeight(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT0_X:
			SetObjectVertexControlPoint0X(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT0_Y:
			SetObjectVertexControlPoint0Y(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT1_X:
			SetObjectVertexControlPoint1X(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT1_Y:
			SetObjectVertexControlPoint1Y(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<float>(ValueType, SubPath, Value);
}

template<>
vec2 CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const
{
	switch(ValueType)
	{
		case OBJECT_POSITION:
			return GetObjectPosition(SubPath);
		case OBJECT_SIZE:
			return GetObjectSize(SubPath);
		case OBJECT_VERTEX_POSITION:
			return GetObjectVertexPosition(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT0:
			return GetObjectVertexControlPoint0(SubPath);
		case OBJECT_VERTEX_CONTROLPOINT1:
			return GetObjectVertexControlPoint1(SubPath);
	}
	return CAsset::GetValue<vec2>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value)
{
	switch(ValueType)
	{
		case OBJECT_POSITION:
			SetObjectPosition(SubPath, Value);
			return true;
		case OBJECT_SIZE:
			SetObjectSize(SubPath, Value);
			return true;
		case OBJECT_VERTEX_POSITION:
			SetObjectVertexPosition(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT0:
			SetObjectVertexControlPoint0(SubPath, Value);
			return true;
		case OBJECT_VERTEX_CONTROLPOINT1:
			SetObjectVertexControlPoint1(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec2>(ValueType, SubPath, Value);
}

template<>
vec4 CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const
{
	switch(ValueType)
	{
		case OBJECT_VERTEX_COLOR:
			return GetObjectVertexColor(SubPath);
	}
	return CAsset::GetValue<vec4>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value)
{
	switch(ValueType)
	{
		case OBJECT_VERTEX_COLOR:
			SetObjectVertexColor(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec4>(ValueType, SubPath, Value);
}

template<>
CAssetPath CAsset_MapLayerObjects::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const
{
	switch(ValueType)
	{
		case PARENTPATH:
			return GetParentPath();
		case OBJECT_STYLEPATH:
			return GetObjectStylePath(SubPath);
		case OBJECT_ANIMATIONPATH:
			return GetObjectAnimationPath(SubPath);
	}
	return CAsset::GetValue<CAssetPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_MapLayerObjects::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value)
{
	switch(ValueType)
	{
		case PARENTPATH:
			SetParentPath(Value);
			return true;
		case OBJECT_STYLEPATH:
			SetObjectStylePath(SubPath, Value);
			return true;
		case OBJECT_ANIMATIONPATH:
			SetObjectAnimationPath(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<CAssetPath>(ValueType, SubPath, Value);
}

int CAsset_MapLayerObjects::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_OBJECT:
			return AddObject();
		case TYPE_OBJECT_VERTEX:
			return AddObjectVertex(SubPath);
	}
	return -1;
}

int CAsset_MapLayerObjects::AddSubItemAt(int Type, const CSubPath& SubPath, int Index)
{
	switch(Type)
	{
		case TYPE_OBJECT:
			AddAtObject(Index);
			return Index;
		case TYPE_OBJECT_VERTEX:
			AddAtObjectVertex(SubPath, Index);
			return Index;
	}
	return -1;
}

void CAsset_MapLayerObjects::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_OBJECT:
			DeleteObject(SubPath);
			break;
		case TYPE_OBJECT_VERTEX:
			DeleteObjectVertex(SubPath);
			break;
	}
}

void CAsset_MapLayerObjects::RelMoveSubItem(CSubPath& SubPath, int RelMove)
{
	switch(SubPath.GetType())
	{
		case TYPE_OBJECT:
			RelMoveObject(SubPath, RelMove);
			break;
		case TYPE_OBJECT_VERTEX:
			RelMoveObjectVertex(SubPath, RelMove);
			break;
	}
}


