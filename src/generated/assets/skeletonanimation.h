/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_SKELETONANIMATION__
#define __CLIENT_ASSETS_SKELETONANIMATION__

#include <shared/assets/asset.h>
#include <cassert>
#include <vector>
#include <shared/assets/assetpath.h>
#include <shared/tl/algorithm.h>

class CAsset_SkeletonAnimation : public CAsset
{
public:
	enum
	{
		GRAPHTYPE_FREE = 0,
		GRAPHTYPE_STEPSTART,
		GRAPHTYPE_STEPEND,
		GRAPHTYPE_STEPMIDDLE,
		GRAPHTYPE_LINEAR,
		GRAPHTYPE_ACCELERATION,
		GRAPHTYPE_DECELERATION,
		GRAPHTYPE_SMOOTH,
		NUM_GRAPHS,
	};
	
	enum
	{
		CYCLETYPE_CLAMP = 0,
		CYCLETYPE_LOOP,
		NUM_CYCLETYPES,
	};
	
	enum
	{
		LAYERSTATE_VISIBLE = 0,
		LAYERSTATE_HIDDEN,
		NUM_LAYERSTATES,
	};
	
	enum
	{
		BONEALIGN_PARENTBONE = 0,
		BONEALIGN_WORLD,
		NUM_BONEALIGNS,
	};
	
	static const int TypeId = 23;
	
	enum
	{
		TYPE_BONEANIMATION_KEYFRAME,
		TYPE_BONEANIMATION,
		TYPE_LAYERANIMATION_KEYFRAME,
		TYPE_LAYERANIMATION,
	};
	
	static inline CSubPath SubPath_BoneAnimationKeyFrame(int Id0, int Id1) { return CSubPath(TYPE_BONEANIMATION_KEYFRAME, Id0, Id1, 0); }
	static inline CSubPath SubPath_BoneAnimation(int Id0) { return CSubPath(TYPE_BONEANIMATION, Id0, 0, 0); }
	static inline CSubPath SubPath_LayerAnimationKeyFrame(int Id0, int Id1) { return CSubPath(TYPE_LAYERANIMATION_KEYFRAME, Id0, Id1, 0); }
	static inline CSubPath SubPath_LayerAnimation(int Id0) { return CSubPath(TYPE_LAYERANIMATION, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		SKELETONPATH,
		BONEANIMATION_ARRAYSIZE,
		BONEANIMATION_PTR,
		BONEANIMATION_ARRAY,
		BONEANIMATION_KEYFRAME_ARRAYSIZE,
		BONEANIMATION_KEYFRAME_PTR,
		BONEANIMATION_KEYFRAME_ARRAY,
		BONEANIMATION_KEYFRAME,
		BONEANIMATION_KEYFRAME_TRANSLATION,
		BONEANIMATION_KEYFRAME_TRANSLATION_X,
		BONEANIMATION_KEYFRAME_TRANSLATION_Y,
		BONEANIMATION_KEYFRAME_SCALE,
		BONEANIMATION_KEYFRAME_SCALE_X,
		BONEANIMATION_KEYFRAME_SCALE_Y,
		BONEANIMATION_KEYFRAME_ANGLE,
		BONEANIMATION_KEYFRAME_ALIGNMENT,
		BONEANIMATION_KEYFRAME_TIME,
		BONEANIMATION_KEYFRAME_GRAPHTYPE,
		BONEANIMATION_BONEPATH,
		BONEANIMATION_CYCLETYPE,
		BONEANIMATION,
		LAYERANIMATION_ARRAYSIZE,
		LAYERANIMATION_PTR,
		LAYERANIMATION_ARRAY,
		LAYERANIMATION_KEYFRAME_ARRAYSIZE,
		LAYERANIMATION_KEYFRAME_PTR,
		LAYERANIMATION_KEYFRAME_ARRAY,
		LAYERANIMATION_KEYFRAME,
		LAYERANIMATION_KEYFRAME_COLOR,
		LAYERANIMATION_KEYFRAME_STATE,
		LAYERANIMATION_KEYFRAME_TIME,
		LAYERANIMATION_KEYFRAME_GRAPHTYPE,
		LAYERANIMATION_LAYERPATH,
		LAYERANIMATION_CYCLETYPE,
		LAYERANIMATION,
	};
	
	class CIteratorBoneAnimation
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorBoneAnimation() : m_Index(0), m_Reverse(false) {}
		CIteratorBoneAnimation(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorBoneAnimation& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_BoneAnimation(m_Index); }
		bool operator==(const CIteratorBoneAnimation& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorBoneAnimation& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorBoneAnimation BeginBoneAnimation() const { return CIteratorBoneAnimation(0, false); }
	CIteratorBoneAnimation EndBoneAnimation() const { return CIteratorBoneAnimation(m_BoneAnimation.size(), false); }
	CIteratorBoneAnimation ReverseBeginBoneAnimation() const { return CIteratorBoneAnimation(m_BoneAnimation.size()-1, true); }
	CIteratorBoneAnimation ReverseEndBoneAnimation() const { return CIteratorBoneAnimation(-1, true); }
	
	class CIteratorLayerAnimation
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorLayerAnimation() : m_Index(0), m_Reverse(false) {}
		CIteratorLayerAnimation(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorLayerAnimation& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_LayerAnimation(m_Index); }
		bool operator==(const CIteratorLayerAnimation& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorLayerAnimation& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorLayerAnimation BeginLayerAnimation() const { return CIteratorLayerAnimation(0, false); }
	CIteratorLayerAnimation EndLayerAnimation() const { return CIteratorLayerAnimation(m_LayerAnimation.size(), false); }
	CIteratorLayerAnimation ReverseBeginLayerAnimation() const { return CIteratorLayerAnimation(m_LayerAnimation.size()-1, true); }
	CIteratorLayerAnimation ReverseEndLayerAnimation() const { return CIteratorLayerAnimation(-1, true); }
	
	class CBoneAnimation
	{
	public:
		class CFrame
		{
		public:
			class CTuaType_0_2_0
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_0& TuaType);
			};
			
			class CTuaType_0_2_1
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_1& TuaType);
			};
			
			class CTuaType_0_2_2
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_2& TuaType);
			};
			
			class CTuaType_0_2_3
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_3& TuaType);
			};
			
			class CTuaType_0_2_4
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_4& TuaType);
			};
			
			class CTuaType_0_3_0
			{
			public:
				CTuaVec2 m_Translation;
				CTuaVec2 m_Scale;
				tua_float m_Angle;
				tua_int32 m_Alignment;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_3_0& TuaType);
			};
			
		
		private:
			vec2 m_Translation;
			vec2 m_Scale;
			float m_Angle;
			int m_Alignment;
		
		public:
			CFrame();
			inline vec2 GetTranslation() const { return m_Translation; }
			
			inline float GetTranslationX() const { return m_Translation.x; }
			
			inline float GetTranslationY() const { return m_Translation.y; }
			
			inline vec2 GetScale() const { return m_Scale; }
			
			inline float GetScaleX() const { return m_Scale.x; }
			
			inline float GetScaleY() const { return m_Scale.y; }
			
			inline float GetAngle() const { return m_Angle; }
			
			inline int GetAlignment() const { return m_Alignment; }
			
			inline void SetTranslation(vec2 Value) { m_Translation = Value; }
			
			inline void SetTranslationX(float Value) { m_Translation.x = Value; }
			
			inline void SetTranslationY(float Value) { m_Translation.y = Value; }
			
			inline void SetScale(vec2 Value) { m_Scale = Value; }
			
			inline void SetScaleX(float Value) { m_Scale.x = Value; }
			
			inline void SetScaleY(float Value) { m_Scale.y = Value; }
			
			inline void SetAngle(float Value) { m_Angle = Value; }
			
			inline void SetAlignment(int Value) { m_Alignment = Value; }
			
			void AssetPathOperation(const CAssetPath::COperation& Operation)
			{
			}
			
		};
		class CKeyFrame : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame
		{
		public:
			class CTuaType_0_2_0 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_0
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_0& TuaType);
			};
			
			class CTuaType_0_2_1 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_1
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_1& TuaType);
			};
			
			class CTuaType_0_2_2 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_2
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_2& TuaType);
			};
			
			class CTuaType_0_2_3 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_3
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_3& TuaType);
			};
			
			class CTuaType_0_2_4 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_4
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_4& TuaType);
			};
			
			class CTuaType_0_3_0 : public CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_3_0
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_3_0& TuaType);
			};
			
		
		private:
			int64 m_Time;
			int m_GraphType;
		
		public:
			CKeyFrame& operator=(const CFrame& Frame);
			CKeyFrame();
			inline int64 GetTime() const { return m_Time; }
			
			inline int GetGraphType() const { return m_GraphType; }
			
			inline void SetTime(int64 Value) { m_Time = Value; }
			
			inline void SetGraphType(int Value) { m_GraphType = Value; }
			
			void AssetPathOperation(const CAssetPath::COperation& Operation)
			{
			}
			
		};
		class CTuaType_0_2_0
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_BonePath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		std::vector<CBoneAnimation::CKeyFrame> m_KeyFrame;
		CSubPath m_BonePath;
		int m_CycleType;
	
	public:
		int64 GetDuration() const;
		int TimeToKeyFrame(int64 Time) const;
		bool GetFrame(int64 Time, CFrame& Frame) const;
		
		CBoneAnimation();
		inline int GetKeyFrameArraySize() const { return m_KeyFrame.size(); }
		
		inline const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame* GetKeyFramePtr() const { return &(m_KeyFrame.front()); }
		
		inline const std::vector<CBoneAnimation::CKeyFrame>& GetKeyFrameArray() const { return m_KeyFrame; }
		inline std::vector<CBoneAnimation::CKeyFrame>& GetKeyFrameArray() { return m_KeyFrame; }
		
		inline const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& GetKeyFrame(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_KeyFrame.size());
			{
				return m_KeyFrame[SubPath.GetId()];
			}
		}
		
		inline vec2 GetKeyFrameTranslation(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetTranslation();
			else return 0.0f;
		}
		
		inline float GetKeyFrameTranslationX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetTranslationX();
			else return 0.0f;
		}
		
		inline float GetKeyFrameTranslationY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetTranslationY();
			else return 0.0f;
		}
		
		inline vec2 GetKeyFrameScale(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetScale();
			else return 0.0f;
		}
		
		inline float GetKeyFrameScaleX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetScaleX();
			else return 0.0f;
		}
		
		inline float GetKeyFrameScaleY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetScaleY();
			else return 0.0f;
		}
		
		inline float GetKeyFrameAngle(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetAngle();
			else return 0.0f;
		}
		
		inline int GetKeyFrameAlignment(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetAlignment();
			else return 0;
		}
		
		inline int64 GetKeyFrameTime(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetTime();
			else return 0;
		}
		
		inline int GetKeyFrameGraphType(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetGraphType();
			else return 0;
		}
		
		inline CSubPath GetBonePath() const { return m_BonePath; }
		
		inline int GetCycleType() const { return m_CycleType; }
		
		inline void SetKeyFrameArraySize(int Value) { m_KeyFrame.resize(Value); }
		
		inline void SetKeyFrame(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
			{
				m_KeyFrame[SubPath.GetId()] = Value;
			}
		}
		
		inline void SetKeyFrameTranslation(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetTranslation(Value);
		}
		
		inline void SetKeyFrameTranslationX(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetTranslationX(Value);
		}
		
		inline void SetKeyFrameTranslationY(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetTranslationY(Value);
		}
		
		inline void SetKeyFrameScale(const CSubPath& SubPath, vec2 Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetScale(Value);
		}
		
		inline void SetKeyFrameScaleX(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetScaleX(Value);
		}
		
		inline void SetKeyFrameScaleY(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetScaleY(Value);
		}
		
		inline void SetKeyFrameAngle(const CSubPath& SubPath, float Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetAngle(Value);
		}
		
		inline void SetKeyFrameAlignment(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetAlignment(Value);
		}
		
		inline void SetKeyFrameTime(const CSubPath& SubPath, int64 Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetTime(Value);
		}
		
		inline void SetKeyFrameGraphType(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetGraphType(Value);
		}
		
		inline void SetBonePath(const CSubPath& Value) { m_BonePath = Value; }
		
		inline void SetCycleType(int Value) { m_CycleType = Value; }
		
		inline int AddKeyFrame()
		{
			int Id = m_KeyFrame.size();
			m_KeyFrame.emplace_back();
			return Id;
		}
		
		inline void AddAtKeyFrame(int Index) { m_KeyFrame.insert(m_KeyFrame.begin() + Index, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame()); }
		
		inline void DeleteKeyFrame(const CSubPath& SubPath) { m_KeyFrame.erase(m_KeyFrame.begin() + SubPath.GetId()); }
		
		inline void RelMoveKeyFrame(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_KeyFrame, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		inline bool IsValidKeyFrame(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_KeyFrame.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			for(unsigned int i=0; i<m_KeyFrame.size(); i++)
			{
				m_KeyFrame[i].AssetPathOperation(Operation);
			}
		}
		
	};
	class CLayerAnimation
	{
	public:
		class CFrame
		{
		public:
			class CTuaType_0_2_0
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_0& TuaType);
			};
			
			class CTuaType_0_2_1
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_1& TuaType);
			};
			
			class CTuaType_0_2_2
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_2& TuaType);
			};
			
			class CTuaType_0_2_3
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_3& TuaType);
			};
			
			class CTuaType_0_2_4
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_4& TuaType);
			};
			
			class CTuaType_0_3_0
			{
			public:
				tua_uint32 m_Color;
				tua_int32 m_State;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_3_0& TuaType);
			};
			
		
		private:
			vec4 m_Color;
			int m_State;
		
		public:
			CFrame();
			inline vec4 GetColor() const { return m_Color; }
			
			inline int GetState() const { return m_State; }
			
			inline void SetColor(vec4 Value) { m_Color = Value; }
			
			inline void SetState(int Value) { m_State = Value; }
			
			void AssetPathOperation(const CAssetPath::COperation& Operation)
			{
			}
			
		};
		class CKeyFrame : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame
		{
		public:
			class CTuaType_0_2_0 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_0
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_0& TuaType);
			};
			
			class CTuaType_0_2_1 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_1
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_1& TuaType);
			};
			
			class CTuaType_0_2_2 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_2
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_2& TuaType);
			};
			
			class CTuaType_0_2_3 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_3
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_3& TuaType);
			};
			
			class CTuaType_0_2_4 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_4
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_4& TuaType);
			};
			
			class CTuaType_0_3_0 : public CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_3_0
			{
			public:
				tua_int64 m_Time;
				tua_int32 m_GraphType;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_3_0& TuaType);
			};
			
		
		private:
			int64 m_Time;
			int m_GraphType;
		
		public:
			CKeyFrame& operator=(const CFrame& Frame);
			CKeyFrame();
			inline int64 GetTime() const { return m_Time; }
			
			inline int GetGraphType() const { return m_GraphType; }
			
			inline void SetTime(int64 Value) { m_Time = Value; }
			
			inline void SetGraphType(int Value) { m_GraphType = Value; }
			
			void AssetPathOperation(const CAssetPath::COperation& Operation)
			{
			}
			
		};
		class CTuaType_0_2_0
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaArray m_KeyFrame;
			CSubPath::CTuaType m_LayerPath;
			tua_int32 m_CycleType;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		std::vector<CLayerAnimation::CKeyFrame> m_KeyFrame;
		CSubPath m_LayerPath;
		int m_CycleType;
	
	public:
		int64 GetDuration() const;
		int TimeToKeyFrame(int64 Time) const;
		bool GetFrame(int64 Time, CFrame& Frame) const;
		
		CLayerAnimation();
		inline int GetKeyFrameArraySize() const { return m_KeyFrame.size(); }
		
		inline const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame* GetKeyFramePtr() const { return &(m_KeyFrame.front()); }
		
		inline const std::vector<CLayerAnimation::CKeyFrame>& GetKeyFrameArray() const { return m_KeyFrame; }
		inline std::vector<CLayerAnimation::CKeyFrame>& GetKeyFrameArray() { return m_KeyFrame; }
		
		inline const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& GetKeyFrame(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_KeyFrame.size());
			{
				return m_KeyFrame[SubPath.GetId()];
			}
		}
		
		inline vec4 GetKeyFrameColor(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetColor();
			else return 1.0f;
		}
		
		inline int GetKeyFrameState(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetState();
			else return 0;
		}
		
		inline int64 GetKeyFrameTime(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetTime();
			else return 0;
		}
		
		inline int GetKeyFrameGraphType(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				return m_KeyFrame[SubPath.GetId()].GetGraphType();
			else return 0;
		}
		
		inline CSubPath GetLayerPath() const { return m_LayerPath; }
		
		inline int GetCycleType() const { return m_CycleType; }
		
		inline void SetKeyFrameArraySize(int Value) { m_KeyFrame.resize(Value); }
		
		inline void SetKeyFrame(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
			{
				m_KeyFrame[SubPath.GetId()] = Value;
			}
		}
		
		inline void SetKeyFrameColor(const CSubPath& SubPath, vec4 Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetColor(Value);
		}
		
		inline void SetKeyFrameState(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetState(Value);
		}
		
		inline void SetKeyFrameTime(const CSubPath& SubPath, int64 Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetTime(Value);
		}
		
		inline void SetKeyFrameGraphType(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_KeyFrame.size())
				m_KeyFrame[SubPath.GetId()].SetGraphType(Value);
		}
		
		inline void SetLayerPath(const CSubPath& Value) { m_LayerPath = Value; }
		
		inline void SetCycleType(int Value) { m_CycleType = Value; }
		
		inline int AddKeyFrame()
		{
			int Id = m_KeyFrame.size();
			m_KeyFrame.emplace_back();
			return Id;
		}
		
		inline void AddAtKeyFrame(int Index) { m_KeyFrame.insert(m_KeyFrame.begin() + Index, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame()); }
		
		inline void DeleteKeyFrame(const CSubPath& SubPath) { m_KeyFrame.erase(m_KeyFrame.begin() + SubPath.GetId()); }
		
		inline void RelMoveKeyFrame(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_KeyFrame, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		inline bool IsValidKeyFrame(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_KeyFrame.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			for(unsigned int i=0; i<m_KeyFrame.size(); i++)
			{
				m_KeyFrame[i].AssetPathOperation(Operation);
			}
		}
		
	};
	class CTuaType_0_2_0 : public CAsset::CTuaType_0_2_0
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_0& TuaType);
	};
	
	class CTuaType_0_2_1 : public CAsset::CTuaType_0_2_1
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_1& TuaType);
	};
	
	class CTuaType_0_2_2 : public CAsset::CTuaType_0_2_2
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_2& TuaType);
	};
	
	class CTuaType_0_2_3 : public CAsset::CTuaType_0_2_3
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_3& TuaType);
	};
	
	class CTuaType_0_2_4 : public CAsset::CTuaType_0_2_4
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_4& TuaType);
	};
	
	class CTuaType_0_3_0 : public CAsset::CTuaType_0_3_0
	{
	public:
		CAssetPath::CTuaType m_SkeletonPath;
		CTuaArray m_BoneAnimation;
		CTuaArray m_LayerAnimation;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_3_0& TuaType);
	};
	

private:
	CAssetPath m_SkeletonPath;
	std::vector<CAsset_SkeletonAnimation::CBoneAnimation> m_BoneAnimation;
	std::vector<CAsset_SkeletonAnimation::CLayerAnimation> m_LayerAnimation;

public:
	bool GetBoneAnimFrame(const CSubPath& SubPath, int64 Time, CBoneAnimation::CFrame& Frame) const;
	bool GetLayerAnimFrame(const CSubPath& SubPath, int64 Time, CLayerAnimation::CFrame& Frame) const;
	CSubPath FindBoneAnim(const CSubPath& BonePath) const;
	CSubPath FindLayerAnim(const CSubPath& LayerPath) const;
	
	virtual ~CAsset_SkeletonAnimation() {}
	
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	int AddSubItem(int Type, const CSubPath& SubPath);
	
	int AddSubItemAt(int Type, const CSubPath& SubPath, int Index);
	
	void DeleteSubItem(const CSubPath& SubPath);
	
	void RelMoveSubItem(CSubPath& SubPath, int RelMove);
	
	inline CAssetPath GetSkeletonPath() const { return m_SkeletonPath; }
	
	inline int GetBoneAnimationArraySize() const { return m_BoneAnimation.size(); }
	
	inline const CAsset_SkeletonAnimation::CBoneAnimation* GetBoneAnimationPtr() const { return &(m_BoneAnimation.front()); }
	
	inline const std::vector<CAsset_SkeletonAnimation::CBoneAnimation>& GetBoneAnimationArray() const { return m_BoneAnimation; }
	inline std::vector<CAsset_SkeletonAnimation::CBoneAnimation>& GetBoneAnimationArray() { return m_BoneAnimation; }
	
	inline const CAsset_SkeletonAnimation::CBoneAnimation& GetBoneAnimation(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_BoneAnimation.size());
		{
			return m_BoneAnimation[SubPath.GetId()];
		}
	}
	
	inline int GetBoneAnimationKeyFrameArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameArraySize();
		else return 0;
	}
	
	inline const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame* GetBoneAnimationKeyFramePtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFramePtr();
		else return NULL;
	}
	
	inline const std::vector<CBoneAnimation::CKeyFrame>& GetBoneAnimationKeyFrameArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_BoneAnimation.size());
		return m_BoneAnimation[SubPath.GetId()].GetKeyFrameArray();
	}
	inline std::vector<CBoneAnimation::CKeyFrame>& GetBoneAnimationKeyFrameArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_BoneAnimation.size());
		return m_BoneAnimation[SubPath.GetId()].GetKeyFrameArray();
	}
	
	inline const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& GetBoneAnimationKeyFrame(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_BoneAnimation.size());
		return m_BoneAnimation[SubPath.GetId()].GetKeyFrame(SubPath.PopId());
	}
	
	inline vec2 GetBoneAnimationKeyFrameTranslation(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameTranslation(SubPath.PopId());
		else return 0.0f;
	}
	
	inline float GetBoneAnimationKeyFrameTranslationX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameTranslationX(SubPath.PopId());
		else return 0.0f;
	}
	
	inline float GetBoneAnimationKeyFrameTranslationY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameTranslationY(SubPath.PopId());
		else return 0.0f;
	}
	
	inline vec2 GetBoneAnimationKeyFrameScale(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameScale(SubPath.PopId());
		else return 0.0f;
	}
	
	inline float GetBoneAnimationKeyFrameScaleX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameScaleX(SubPath.PopId());
		else return 0.0f;
	}
	
	inline float GetBoneAnimationKeyFrameScaleY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameScaleY(SubPath.PopId());
		else return 0.0f;
	}
	
	inline float GetBoneAnimationKeyFrameAngle(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameAngle(SubPath.PopId());
		else return 0.0f;
	}
	
	inline int GetBoneAnimationKeyFrameAlignment(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameAlignment(SubPath.PopId());
		else return 0;
	}
	
	inline int64 GetBoneAnimationKeyFrameTime(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameTime(SubPath.PopId());
		else return 0;
	}
	
	inline int GetBoneAnimationKeyFrameGraphType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetKeyFrameGraphType(SubPath.PopId());
		else return 0;
	}
	
	inline CSubPath GetBoneAnimationBonePath(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetBonePath();
		else return CSubPath::Null();
	}
	
	inline int GetBoneAnimationCycleType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			return m_BoneAnimation[SubPath.GetId()].GetCycleType();
		else return 0;
	}
	
	inline int GetLayerAnimationArraySize() const { return m_LayerAnimation.size(); }
	
	inline const CAsset_SkeletonAnimation::CLayerAnimation* GetLayerAnimationPtr() const { return &(m_LayerAnimation.front()); }
	
	inline const std::vector<CAsset_SkeletonAnimation::CLayerAnimation>& GetLayerAnimationArray() const { return m_LayerAnimation; }
	inline std::vector<CAsset_SkeletonAnimation::CLayerAnimation>& GetLayerAnimationArray() { return m_LayerAnimation; }
	
	inline const CAsset_SkeletonAnimation::CLayerAnimation& GetLayerAnimation(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_LayerAnimation.size());
		{
			return m_LayerAnimation[SubPath.GetId()];
		}
	}
	
	inline int GetLayerAnimationKeyFrameArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFrameArraySize();
		else return 0;
	}
	
	inline const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame* GetLayerAnimationKeyFramePtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFramePtr();
		else return NULL;
	}
	
	inline const std::vector<CLayerAnimation::CKeyFrame>& GetLayerAnimationKeyFrameArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_LayerAnimation.size());
		return m_LayerAnimation[SubPath.GetId()].GetKeyFrameArray();
	}
	inline std::vector<CLayerAnimation::CKeyFrame>& GetLayerAnimationKeyFrameArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_LayerAnimation.size());
		return m_LayerAnimation[SubPath.GetId()].GetKeyFrameArray();
	}
	
	inline const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& GetLayerAnimationKeyFrame(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_LayerAnimation.size());
		return m_LayerAnimation[SubPath.GetId()].GetKeyFrame(SubPath.PopId());
	}
	
	inline vec4 GetLayerAnimationKeyFrameColor(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFrameColor(SubPath.PopId());
		else return 1.0f;
	}
	
	inline int GetLayerAnimationKeyFrameState(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFrameState(SubPath.PopId());
		else return 0;
	}
	
	inline int64 GetLayerAnimationKeyFrameTime(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFrameTime(SubPath.PopId());
		else return 0;
	}
	
	inline int GetLayerAnimationKeyFrameGraphType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetKeyFrameGraphType(SubPath.PopId());
		else return 0;
	}
	
	inline CSubPath GetLayerAnimationLayerPath(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetLayerPath();
		else return CSubPath::Null();
	}
	
	inline int GetLayerAnimationCycleType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			return m_LayerAnimation[SubPath.GetId()].GetCycleType();
		else return 0;
	}
	
	inline void SetSkeletonPath(const CAssetPath& Value) { m_SkeletonPath = Value; }
	
	inline void SetBoneAnimationArraySize(int Value) { m_BoneAnimation.resize(Value); }
	
	inline void SetBoneAnimation(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CBoneAnimation& Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
		{
			m_BoneAnimation[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetBoneAnimationKeyFrameArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameArraySize(Value);
	}
	
	inline void SetBoneAnimationKeyFrame(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrame(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameTranslation(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameTranslation(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameTranslationX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameTranslationX(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameTranslationY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameTranslationY(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameScale(const CSubPath& SubPath, vec2 Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameScale(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameScaleX(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameScaleX(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameScaleY(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameScaleY(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameAngle(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameAngle(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameAlignment(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameAlignment(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameTime(const CSubPath& SubPath, int64 Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameTime(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationKeyFrameGraphType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetKeyFrameGraphType(SubPath.PopId(), Value);
	}
	
	inline void SetBoneAnimationBonePath(const CSubPath& SubPath, const CSubPath& Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetBonePath(Value);
	}
	
	inline void SetBoneAnimationCycleType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_BoneAnimation.size())
			m_BoneAnimation[SubPath.GetId()].SetCycleType(Value);
	}
	
	inline void SetLayerAnimationArraySize(int Value) { m_LayerAnimation.resize(Value); }
	
	inline void SetLayerAnimation(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CLayerAnimation& Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
		{
			m_LayerAnimation[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetLayerAnimationKeyFrameArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrameArraySize(Value);
	}
	
	inline void SetLayerAnimationKeyFrame(const CSubPath& SubPath, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrame(SubPath.PopId(), Value);
	}
	
	inline void SetLayerAnimationKeyFrameColor(const CSubPath& SubPath, vec4 Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrameColor(SubPath.PopId(), Value);
	}
	
	inline void SetLayerAnimationKeyFrameState(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrameState(SubPath.PopId(), Value);
	}
	
	inline void SetLayerAnimationKeyFrameTime(const CSubPath& SubPath, int64 Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrameTime(SubPath.PopId(), Value);
	}
	
	inline void SetLayerAnimationKeyFrameGraphType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetKeyFrameGraphType(SubPath.PopId(), Value);
	}
	
	inline void SetLayerAnimationLayerPath(const CSubPath& SubPath, const CSubPath& Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetLayerPath(Value);
	}
	
	inline void SetLayerAnimationCycleType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_LayerAnimation.size())
			m_LayerAnimation[SubPath.GetId()].SetCycleType(Value);
	}
	
	inline int AddBoneAnimation()
	{
		int Id = m_BoneAnimation.size();
		m_BoneAnimation.emplace_back();
		return Id;
	}
	
	inline int AddBoneAnimationKeyFrame(const CSubPath& SubPath) { return m_BoneAnimation[SubPath.GetId()].AddKeyFrame(); }
	
	inline int AddLayerAnimation()
	{
		int Id = m_LayerAnimation.size();
		m_LayerAnimation.emplace_back();
		return Id;
	}
	
	inline int AddLayerAnimationKeyFrame(const CSubPath& SubPath) { return m_LayerAnimation[SubPath.GetId()].AddKeyFrame(); }
	
	inline void AddAtBoneAnimation(int Index) { m_BoneAnimation.insert(m_BoneAnimation.begin() + Index, CAsset_SkeletonAnimation::CBoneAnimation()); }
	
	inline void AddAtBoneAnimationKeyFrame(const CSubPath& SubPath, int Index) { m_BoneAnimation[SubPath.GetId()].AddAtKeyFrame(Index); }
	
	inline void AddAtLayerAnimation(int Index) { m_LayerAnimation.insert(m_LayerAnimation.begin() + Index, CAsset_SkeletonAnimation::CLayerAnimation()); }
	
	inline void AddAtLayerAnimationKeyFrame(const CSubPath& SubPath, int Index) { m_LayerAnimation[SubPath.GetId()].AddAtKeyFrame(Index); }
	
	inline void DeleteBoneAnimation(const CSubPath& SubPath) { m_BoneAnimation.erase(m_BoneAnimation.begin() + SubPath.GetId()); }
	
	inline void DeleteBoneAnimationKeyFrame(const CSubPath& SubPath) { m_BoneAnimation[SubPath.GetId()].DeleteKeyFrame(SubPath.PopId()); }
	
	inline void DeleteLayerAnimation(const CSubPath& SubPath) { m_LayerAnimation.erase(m_LayerAnimation.begin() + SubPath.GetId()); }
	
	inline void DeleteLayerAnimationKeyFrame(const CSubPath& SubPath) { m_LayerAnimation[SubPath.GetId()].DeleteKeyFrame(SubPath.PopId()); }
	
	inline void RelMoveBoneAnimation(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_BoneAnimation, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveBoneAnimationKeyFrame(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_BoneAnimation[SubPath.GetId()].RelMoveKeyFrame(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	inline void RelMoveLayerAnimation(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_LayerAnimation, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveLayerAnimationKeyFrame(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_LayerAnimation[SubPath.GetId()].RelMoveKeyFrame(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	inline bool IsValidBoneAnimation(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_BoneAnimation.size()); }
	
	inline bool IsValidBoneAnimationKeyFrame(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_BoneAnimation.size() && m_BoneAnimation[SubPath.GetId()].IsValidKeyFrame(SubPath.PopId())); }
	
	inline bool IsValidLayerAnimation(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_LayerAnimation.size()); }
	
	inline bool IsValidLayerAnimationKeyFrame(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_LayerAnimation.size() && m_LayerAnimation[SubPath.GetId()].IsValidKeyFrame(SubPath.PopId())); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		Operation.Apply(m_SkeletonPath);
		for(unsigned int i=0; i<m_BoneAnimation.size(); i++)
		{
			m_BoneAnimation[i].AssetPathOperation(Operation);
		}
		for(unsigned int i=0; i<m_LayerAnimation.size(); i++)
		{
			m_LayerAnimation[i].AssetPathOperation(Operation);
		}
	}
	
};

template<> int CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, int Value);
template<> int64 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, int64 DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, int64 Value);
template<> float CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, float Value);
template<> vec2 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value);
template<> vec4 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value);
template<> CAssetPath CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value);
template<> CSubPath CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, CSubPath DefaultValue) const;
template<> bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, CSubPath Value);

#endif
