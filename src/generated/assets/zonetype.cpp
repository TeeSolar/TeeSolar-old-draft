/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/zonetype.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_ZoneType::CIndex::CIndex()
{
	m_Used = true;
	m_Color = 1.0f;
	m_BorderIndex = 0;
	m_BorderColor = 1.0f;
	m_Group = -1;
	m_RotationAllowed = false;
	m_MirrorAllowed = false;
}

CAsset_ZoneType::CDataInt::CDataInt()
{
	m_DefaultValue = 0;
	m_MinValue = 0;
	m_MaxValue = 255;
	m_NullValue = 0;
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
}


void CAsset_ZoneType::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_2_0* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_ZoneType::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_2_0* pData = new CAsset_ZoneType::CIndex::CTuaType_0_2_0[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_0)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_0)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
}

void CAsset_ZoneType::CIndex::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
}


void CAsset_ZoneType::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_2_1* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_ZoneType::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_2_1* pData = new CAsset_ZoneType::CIndex::CTuaType_0_2_1[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_1)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_1)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
}

void CAsset_ZoneType::CIndex::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
	SysType.m_Group = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Group);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_DefaultValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_DefaultValue);
	SysType.m_MinValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MinValue);
	SysType.m_MaxValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MaxValue);
	SysType.m_NullValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_NullValue);
}


void CAsset_ZoneType::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_2_2* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_ZoneType::CDataInt::CTuaType_0_2_2* pData = (const CAsset_ZoneType::CDataInt::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_DataInt.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_DataInt.m_Size);
		SysType.m_DataInt.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_DataInt[i]);
		}
	}
	
	{
		const tua_stringid* pData = (const tua_stringid*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Group.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Group.m_Size);
		SysType.m_Group.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Group[i] = pLoadingContext->ArchiveFile()->GetString(pData[i]);
		}
	}
	
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
	TuaType.m_Group = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Group);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_DefaultValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_DefaultValue);
	TuaType.m_MinValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MinValue);
	TuaType.m_MaxValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MaxValue);
	TuaType.m_NullValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_NullValue);
}

void CAsset_ZoneType::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_2_2* pData = new CAsset_ZoneType::CIndex::CTuaType_0_2_2[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_2)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_2)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_DataInt.m_Size = SysType.m_DataInt.size();
		CAsset_ZoneType::CDataInt::CTuaType_0_2_2* pData = new CAsset_ZoneType::CDataInt::CTuaType_0_2_2[SysType.m_DataInt.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_2)*SysType.m_DataInt.size());
		for(unsigned int i=0; i<SysType.m_DataInt.size(); i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_DataInt[i], pData[i]);
		}
		TuaType.m_DataInt.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_2)*SysType.m_DataInt.size());
		delete[] pData;
	}
	{
		TuaType.m_Group.m_Size = SysType.m_Group.size();
		tua_stringid* pData = new tua_stringid[SysType.m_Group.size()];
		mem_zero((void*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		for(unsigned int i=0; i<SysType.m_Group.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->AddString(SysType.m_Group[i].buffer());
		}
		TuaType.m_Group.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		delete[] pData;
	}
}

void CAsset_ZoneType::CIndex::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
	SysType.m_Group = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Group);
	SysType.m_RotationAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_RotationAllowed);
	SysType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_MirrorAllowed);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_DefaultValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_DefaultValue);
	SysType.m_MinValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MinValue);
	SysType.m_MaxValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MaxValue);
	SysType.m_NullValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_NullValue);
}


void CAsset_ZoneType::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_2_3* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_ZoneType::CDataInt::CTuaType_0_2_3* pData = (const CAsset_ZoneType::CDataInt::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_DataInt.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_DataInt.m_Size);
		SysType.m_DataInt.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_DataInt[i]);
		}
	}
	
	{
		const tua_stringid* pData = (const tua_stringid*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Group.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Group.m_Size);
		SysType.m_Group.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Group[i] = pLoadingContext->ArchiveFile()->GetString(pData[i]);
		}
	}
	
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
	TuaType.m_Group = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Group);
	TuaType.m_RotationAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_RotationAllowed);
	TuaType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_MirrorAllowed);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_DefaultValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_DefaultValue);
	TuaType.m_MinValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MinValue);
	TuaType.m_MaxValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MaxValue);
	TuaType.m_NullValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_NullValue);
}

void CAsset_ZoneType::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_2_3* pData = new CAsset_ZoneType::CIndex::CTuaType_0_2_3[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_3)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_3)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_DataInt.m_Size = SysType.m_DataInt.size();
		CAsset_ZoneType::CDataInt::CTuaType_0_2_3* pData = new CAsset_ZoneType::CDataInt::CTuaType_0_2_3[SysType.m_DataInt.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_3)*SysType.m_DataInt.size());
		for(unsigned int i=0; i<SysType.m_DataInt.size(); i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_DataInt[i], pData[i]);
		}
		TuaType.m_DataInt.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_3)*SysType.m_DataInt.size());
		delete[] pData;
	}
	{
		TuaType.m_Group.m_Size = SysType.m_Group.size();
		tua_stringid* pData = new tua_stringid[SysType.m_Group.size()];
		mem_zero((void*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		for(unsigned int i=0; i<SysType.m_Group.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->AddString(SysType.m_Group[i].buffer());
		}
		TuaType.m_Group.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		delete[] pData;
	}
}

void CAsset_ZoneType::CIndex::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
	SysType.m_Group = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Group);
	SysType.m_RotationAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_RotationAllowed);
	SysType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_MirrorAllowed);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_DefaultValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_DefaultValue);
	SysType.m_MinValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MinValue);
	SysType.m_MaxValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MaxValue);
	SysType.m_NullValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_NullValue);
}


void CAsset_ZoneType::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_2_4* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_ZoneType::CDataInt::CTuaType_0_2_4* pData = (const CAsset_ZoneType::CDataInt::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_DataInt.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_DataInt.m_Size);
		SysType.m_DataInt.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_DataInt[i]);
		}
	}
	
	{
		const tua_stringid* pData = (const tua_stringid*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Group.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Group.m_Size);
		SysType.m_Group.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Group[i] = pLoadingContext->ArchiveFile()->GetString(pData[i]);
		}
	}
	
}


void CAsset_ZoneType::CIndex::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
	TuaType.m_Group = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Group);
	TuaType.m_RotationAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_RotationAllowed);
	TuaType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_MirrorAllowed);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_DefaultValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_DefaultValue);
	TuaType.m_MinValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MinValue);
	TuaType.m_MaxValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MaxValue);
	TuaType.m_NullValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_NullValue);
}

void CAsset_ZoneType::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_2_4* pData = new CAsset_ZoneType::CIndex::CTuaType_0_2_4[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_4)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_2_4)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_DataInt.m_Size = SysType.m_DataInt.size();
		CAsset_ZoneType::CDataInt::CTuaType_0_2_4* pData = new CAsset_ZoneType::CDataInt::CTuaType_0_2_4[SysType.m_DataInt.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_4)*SysType.m_DataInt.size());
		for(unsigned int i=0; i<SysType.m_DataInt.size(); i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_DataInt[i], pData[i]);
		}
		TuaType.m_DataInt.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_2_4)*SysType.m_DataInt.size());
		delete[] pData;
	}
	{
		TuaType.m_Group.m_Size = SysType.m_Group.size();
		tua_stringid* pData = new tua_stringid[SysType.m_Group.size()];
		mem_zero((void*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		for(unsigned int i=0; i<SysType.m_Group.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->AddString(SysType.m_Group[i].buffer());
		}
		TuaType.m_Group.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		delete[] pData;
	}
}

void CAsset_ZoneType::CIndex::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_ZoneType::CIndex& SysType)
{
	SysType.m_Used = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_Used);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_BorderIndex = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_BorderIndex);
	SysType.m_BorderColor = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_BorderColor);
	SysType.m_Group = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Group);
	SysType.m_RotationAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_RotationAllowed);
	SysType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->ReadBool(TuaType.m_MirrorAllowed);
}


void CAsset_ZoneType::CDataInt::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_ZoneType::CDataInt& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	SysType.m_Description = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Description);
	SysType.m_DefaultValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_DefaultValue);
	SysType.m_MinValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MinValue);
	SysType.m_MaxValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_MaxValue);
	SysType.m_NullValue = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_NullValue);
}


void CAsset_ZoneType::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_ZoneType& SysType)
{
	CAsset::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_ZoneType::CIndex::CTuaType_0_3_0* pData = (const CAsset_ZoneType::CIndex::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_ZoneType::CDataInt::CTuaType_0_3_0* pData = (const CAsset_ZoneType::CDataInt::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_DataInt.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_DataInt.m_Size);
		SysType.m_DataInt.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_DataInt[i]);
		}
	}
	
	{
		const tua_stringid* pData = (const tua_stringid*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Group.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Group.m_Size);
		SysType.m_Group.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Group[i] = pLoadingContext->ArchiveFile()->GetString(pData[i]);
		}
	}
	
}


void CAsset_ZoneType::CIndex::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CIndex& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Used = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_Used);
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_BorderIndex = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_BorderIndex);
	TuaType.m_BorderColor = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_BorderColor);
	TuaType.m_Group = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Group);
	TuaType.m_RotationAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_RotationAllowed);
	TuaType.m_MirrorAllowed = pLoadingContext->ArchiveFile()->WriteBool(SysType.m_MirrorAllowed);
}

void CAsset_ZoneType::CDataInt::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType::CDataInt& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	TuaType.m_Description = pLoadingContext->ArchiveFile()->AddString(SysType.m_Description.buffer());
	TuaType.m_DefaultValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_DefaultValue);
	TuaType.m_MinValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MinValue);
	TuaType.m_MaxValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_MaxValue);
	TuaType.m_NullValue = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_NullValue);
}

void CAsset_ZoneType::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_ZoneType& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_ZoneType::CIndex::CTuaType_0_3_0* pData = new CAsset_ZoneType::CIndex::CTuaType_0_3_0[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_3_0)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_ZoneType::CIndex::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CIndex::CTuaType_0_3_0)*SysType.m_Index.size());
		delete[] pData;
	}
	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_DataInt.m_Size = SysType.m_DataInt.size();
		CAsset_ZoneType::CDataInt::CTuaType_0_3_0* pData = new CAsset_ZoneType::CDataInt::CTuaType_0_3_0[SysType.m_DataInt.size()];
		mem_zero((void*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_3_0)*SysType.m_DataInt.size());
		for(unsigned int i=0; i<SysType.m_DataInt.size(); i++)
		{
			CAsset_ZoneType::CDataInt::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_DataInt[i], pData[i]);
		}
		TuaType.m_DataInt.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_ZoneType::CDataInt::CTuaType_0_3_0)*SysType.m_DataInt.size());
		delete[] pData;
	}
	{
		TuaType.m_Group.m_Size = SysType.m_Group.size();
		tua_stringid* pData = new tua_stringid[SysType.m_Group.size()];
		mem_zero((void*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		for(unsigned int i=0; i<SysType.m_Group.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->AddString(SysType.m_Group[i].buffer());
		}
		TuaType.m_Group.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_stringid)*SysType.m_Group.size());
		delete[] pData;
	}
}

template<>
int CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case INDEX_ARRAYSIZE:
			return GetIndexArraySize();
		case INDEX_BORDERINDEX:
			return GetIndexBorderIndex(SubPath);
		case INDEX_GROUP:
			return GetIndexGroup(SubPath);
		case DATAINT_ARRAYSIZE:
			return GetDataIntArraySize();
		case DATAINT_DEFAULTVALUE:
			return GetDataIntDefaultValue(SubPath);
		case DATAINT_MINVALUE:
			return GetDataIntMinValue(SubPath);
		case DATAINT_MAXVALUE:
			return GetDataIntMaxValue(SubPath);
		case DATAINT_NULLVALUE:
			return GetDataIntNullValue(SubPath);
		case GROUP_ARRAYSIZE:
			return GetGroupArraySize();
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case INDEX_ARRAYSIZE:
			SetIndexArraySize(Value);
			return true;
		case INDEX_BORDERINDEX:
			SetIndexBorderIndex(SubPath, Value);
			return true;
		case INDEX_GROUP:
			SetIndexGroup(SubPath, Value);
			return true;
		case DATAINT_ARRAYSIZE:
			SetDataIntArraySize(Value);
			return true;
		case DATAINT_DEFAULTVALUE:
			SetDataIntDefaultValue(SubPath, Value);
			return true;
		case DATAINT_MINVALUE:
			SetDataIntMinValue(SubPath, Value);
			return true;
		case DATAINT_MAXVALUE:
			SetDataIntMaxValue(SubPath, Value);
			return true;
		case DATAINT_NULLVALUE:
			SetDataIntNullValue(SubPath, Value);
			return true;
		case GROUP_ARRAYSIZE:
			SetGroupArraySize(Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
bool CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, bool DefaultValue) const
{
	switch(ValueType)
	{
		case INDEX_USED:
			return GetIndexUsed(SubPath);
		case INDEX_ROTATIONALLOWED:
			return GetIndexRotationAllowed(SubPath);
		case INDEX_MIRRORALLOWED:
			return GetIndexMirrorAllowed(SubPath);
	}
	return CAsset::GetValue<bool>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, bool Value)
{
	switch(ValueType)
	{
		case INDEX_USED:
			SetIndexUsed(SubPath, Value);
			return true;
		case INDEX_ROTATIONALLOWED:
			SetIndexRotationAllowed(SubPath, Value);
			return true;
		case INDEX_MIRRORALLOWED:
			SetIndexMirrorAllowed(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<bool>(ValueType, SubPath, Value);
}

template<>
const char* CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, const char* DefaultValue) const
{
	switch(ValueType)
	{
		case INDEX_DESCRIPTION:
			return GetIndexDescription(SubPath);
		case INDEX_TITLE:
			return GetIndexTitle(SubPath);
		case DATAINT_TITLE:
			return GetDataIntTitle(SubPath);
		case DATAINT_DESCRIPTION:
			return GetDataIntDescription(SubPath);
		case GROUP:
			return GetGroup(SubPath);
	}
	return CAsset::GetValue<const char*>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, const char* Value)
{
	switch(ValueType)
	{
		case INDEX_DESCRIPTION:
			SetIndexDescription(SubPath, Value);
			return true;
		case INDEX_TITLE:
			SetIndexTitle(SubPath, Value);
			return true;
		case DATAINT_TITLE:
			SetDataIntTitle(SubPath, Value);
			return true;
		case DATAINT_DESCRIPTION:
			SetDataIntDescription(SubPath, Value);
			return true;
		case GROUP:
			SetGroup(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<const char*>(ValueType, SubPath, Value);
}

template<>
vec4 CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const
{
	switch(ValueType)
	{
		case INDEX_COLOR:
			return GetIndexColor(SubPath);
		case INDEX_BORDERCOLOR:
			return GetIndexBorderColor(SubPath);
	}
	return CAsset::GetValue<vec4>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value)
{
	switch(ValueType)
	{
		case INDEX_COLOR:
			SetIndexColor(SubPath, Value);
			return true;
		case INDEX_BORDERCOLOR:
			SetIndexBorderColor(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec4>(ValueType, SubPath, Value);
}

template<>
CAssetPath CAsset_ZoneType::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const
{
	switch(ValueType)
	{
		case IMAGEPATH:
			return GetImagePath();
	}
	return CAsset::GetValue<CAssetPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_ZoneType::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value)
{
	switch(ValueType)
	{
		case IMAGEPATH:
			SetImagePath(Value);
			return true;
	}
	return CAsset::SetValue<CAssetPath>(ValueType, SubPath, Value);
}

int CAsset_ZoneType::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_INDEX:
			return AddIndex();
		case TYPE_DATAINT:
			return AddDataInt();
		case TYPE_GROUP:
			return AddGroup();
	}
	return -1;
}

int CAsset_ZoneType::AddSubItemAt(int Type, const CSubPath& SubPath, int Index)
{
	switch(Type)
	{
		case TYPE_INDEX:
			AddAtIndex(Index);
			return Index;
		case TYPE_DATAINT:
			AddAtDataInt(Index);
			return Index;
		case TYPE_GROUP:
			AddAtGroup(Index);
			return Index;
	}
	return -1;
}

void CAsset_ZoneType::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_INDEX:
			DeleteIndex(SubPath);
			break;
		case TYPE_DATAINT:
			DeleteDataInt(SubPath);
			break;
		case TYPE_GROUP:
			DeleteGroup(SubPath);
			break;
	}
}

void CAsset_ZoneType::RelMoveSubItem(CSubPath& SubPath, int RelMove)
{
	switch(SubPath.GetType())
	{
		case TYPE_INDEX:
			RelMoveIndex(SubPath, RelMove);
			break;
		case TYPE_DATAINT:
			RelMoveDataInt(SubPath, RelMove);
			break;
		case TYPE_GROUP:
			RelMoveGroup(SubPath, RelMove);
			break;
	}
}


