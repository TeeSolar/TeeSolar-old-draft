/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/skeletonanimation.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CFrame()
{
	m_Translation = 0.0f;
	m_Scale = 1.0f;
	m_Angle = 0.0f;
	m_Alignment = BONEALIGN_PARENTBONE;
}

CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CKeyFrame()
{
	m_Time = 0;
	m_GraphType = GRAPHTYPE_LINEAR;
}

CAsset_SkeletonAnimation::CBoneAnimation::CBoneAnimation()
{
	m_CycleType = CYCLETYPE_CLAMP;
}

CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CFrame()
{
	m_Color = 1.0f;
	m_State = LAYERSTATE_VISIBLE;
}

CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CKeyFrame()
{
	m_Time = 0;
	m_GraphType = GRAPHTYPE_LINEAR;
}

CAsset_SkeletonAnimation::CLayerAnimation::CLayerAnimation()
{
	m_CycleType = CYCLETYPE_CLAMP;
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_0& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_0)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_0& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_0)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_0)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_0)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_1& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_1)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_1& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_1)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_1)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_1)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_2& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_2)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_2& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_2)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_2)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_2)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_3& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_3)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_3& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_3)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_3)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_3)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_2_4& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_2_4)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_2_4& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_2_4)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_2_4)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_2_4)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType)
{
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Scale.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_X);
	SysType.m_Scale.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Scale.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Alignment = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Alignment);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CBoneAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_BonePath, SysType.m_BonePath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType)
{
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
	SysType.m_State = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_State);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	SysType.m_Time = pLoadingContext->ArchiveFile()->ReadInt64(TuaType.m_Time);
	SysType.m_GraphType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_GraphType);
}


void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation::CLayerAnimation& SysType)
{
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_KeyFrame.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_KeyFrame.m_Size);
		SysType.m_KeyFrame.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_KeyFrame[i]);
		}
	}
	
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_LayerPath, SysType.m_LayerPath);
	SysType.m_CycleType = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_CycleType);
}


void CAsset_SkeletonAnimation::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_SkeletonAnimation& SysType)
{
	CAsset::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_SkeletonPath, SysType.m_SkeletonPath);
	{
		const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0* pData = (const CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_BoneAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_BoneAnimation.m_Size);
		SysType.m_BoneAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_BoneAnimation[i]);
		}
	}
	
	{
		const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0* pData = (const CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_LayerAnimation.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_LayerAnimation.m_Size);
		SysType.m_LayerAnimation.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_LayerAnimation[i]);
		}
	}
	
}


void CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CFrame& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Scale.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.x);
	TuaType.m_Scale.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Scale.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Alignment = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Alignment);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset_SkeletonAnimation::CBoneAnimation::CFrame::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CBoneAnimation& SysType, CTuaType_0_3_0& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CKeyFrame::CTuaType_0_3_0)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_BonePath, TuaType.m_BonePath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CFrame& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
	TuaType.m_State = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_State);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset_SkeletonAnimation::CLayerAnimation::CFrame::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	TuaType.m_Time = pLoadingContext->ArchiveFile()->WriteInt64(SysType.m_Time);
	TuaType.m_GraphType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_GraphType);
}

void CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation::CLayerAnimation& SysType, CTuaType_0_3_0& TuaType)
{
	{
		TuaType.m_KeyFrame.m_Size = SysType.m_KeyFrame.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0[SysType.m_KeyFrame.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0)*SysType.m_KeyFrame.size());
		for(unsigned int i=0; i<SysType.m_KeyFrame.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_KeyFrame[i], pData[i]);
		}
		TuaType.m_KeyFrame.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CKeyFrame::CTuaType_0_3_0)*SysType.m_KeyFrame.size());
		delete[] pData;
	}
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_LayerPath, TuaType.m_LayerPath);
	TuaType.m_CycleType = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_CycleType);
}

void CAsset_SkeletonAnimation::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_SkeletonAnimation& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_SkeletonPath, TuaType.m_SkeletonPath);
	{
		TuaType.m_BoneAnimation.m_Size = SysType.m_BoneAnimation.size();
		CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0* pData = new CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0[SysType.m_BoneAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0)*SysType.m_BoneAnimation.size());
		for(unsigned int i=0; i<SysType.m_BoneAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_BoneAnimation[i], pData[i]);
		}
		TuaType.m_BoneAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CBoneAnimation::CTuaType_0_3_0)*SysType.m_BoneAnimation.size());
		delete[] pData;
	}
	{
		TuaType.m_LayerAnimation.m_Size = SysType.m_LayerAnimation.size();
		CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0* pData = new CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0[SysType.m_LayerAnimation.size()];
		mem_zero((void*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0)*SysType.m_LayerAnimation.size());
		for(unsigned int i=0; i<SysType.m_LayerAnimation.size(); i++)
		{
			CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_LayerAnimation[i], pData[i]);
		}
		TuaType.m_LayerAnimation.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_SkeletonAnimation::CLayerAnimation::CTuaType_0_3_0)*SysType.m_LayerAnimation.size());
		delete[] pData;
	}
}

template<>
int CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case BONEANIMATION_ARRAYSIZE:
			return GetBoneAnimationArraySize();
		case BONEANIMATION_KEYFRAME_ARRAYSIZE:
			return GetBoneAnimationKeyFrameArraySize(SubPath);
		case BONEANIMATION_KEYFRAME_ALIGNMENT:
			return GetBoneAnimationKeyFrameAlignment(SubPath);
		case BONEANIMATION_KEYFRAME_GRAPHTYPE:
			return GetBoneAnimationKeyFrameGraphType(SubPath);
		case BONEANIMATION_CYCLETYPE:
			return GetBoneAnimationCycleType(SubPath);
		case LAYERANIMATION_ARRAYSIZE:
			return GetLayerAnimationArraySize();
		case LAYERANIMATION_KEYFRAME_ARRAYSIZE:
			return GetLayerAnimationKeyFrameArraySize(SubPath);
		case LAYERANIMATION_KEYFRAME_STATE:
			return GetLayerAnimationKeyFrameState(SubPath);
		case LAYERANIMATION_KEYFRAME_GRAPHTYPE:
			return GetLayerAnimationKeyFrameGraphType(SubPath);
		case LAYERANIMATION_CYCLETYPE:
			return GetLayerAnimationCycleType(SubPath);
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case BONEANIMATION_ARRAYSIZE:
			SetBoneAnimationArraySize(Value);
			return true;
		case BONEANIMATION_KEYFRAME_ARRAYSIZE:
			SetBoneAnimationKeyFrameArraySize(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_ALIGNMENT:
			SetBoneAnimationKeyFrameAlignment(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_GRAPHTYPE:
			SetBoneAnimationKeyFrameGraphType(SubPath, Value);
			return true;
		case BONEANIMATION_CYCLETYPE:
			SetBoneAnimationCycleType(SubPath, Value);
			return true;
		case LAYERANIMATION_ARRAYSIZE:
			SetLayerAnimationArraySize(Value);
			return true;
		case LAYERANIMATION_KEYFRAME_ARRAYSIZE:
			SetLayerAnimationKeyFrameArraySize(SubPath, Value);
			return true;
		case LAYERANIMATION_KEYFRAME_STATE:
			SetLayerAnimationKeyFrameState(SubPath, Value);
			return true;
		case LAYERANIMATION_KEYFRAME_GRAPHTYPE:
			SetLayerAnimationKeyFrameGraphType(SubPath, Value);
			return true;
		case LAYERANIMATION_CYCLETYPE:
			SetLayerAnimationCycleType(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
int64 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, int64 DefaultValue) const
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TIME:
			return GetBoneAnimationKeyFrameTime(SubPath);
		case LAYERANIMATION_KEYFRAME_TIME:
			return GetLayerAnimationKeyFrameTime(SubPath);
	}
	return CAsset::GetValue<int64>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, int64 Value)
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TIME:
			SetBoneAnimationKeyFrameTime(SubPath, Value);
			return true;
		case LAYERANIMATION_KEYFRAME_TIME:
			SetLayerAnimationKeyFrameTime(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<int64>(ValueType, SubPath, Value);
}

template<>
float CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TRANSLATION_X:
			return GetBoneAnimationKeyFrameTranslationX(SubPath);
		case BONEANIMATION_KEYFRAME_TRANSLATION_Y:
			return GetBoneAnimationKeyFrameTranslationY(SubPath);
		case BONEANIMATION_KEYFRAME_SCALE_X:
			return GetBoneAnimationKeyFrameScaleX(SubPath);
		case BONEANIMATION_KEYFRAME_SCALE_Y:
			return GetBoneAnimationKeyFrameScaleY(SubPath);
		case BONEANIMATION_KEYFRAME_ANGLE:
			return GetBoneAnimationKeyFrameAngle(SubPath);
	}
	return CAsset::GetValue<float>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, float Value)
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TRANSLATION_X:
			SetBoneAnimationKeyFrameTranslationX(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_TRANSLATION_Y:
			SetBoneAnimationKeyFrameTranslationY(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_SCALE_X:
			SetBoneAnimationKeyFrameScaleX(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_SCALE_Y:
			SetBoneAnimationKeyFrameScaleY(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_ANGLE:
			SetBoneAnimationKeyFrameAngle(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<float>(ValueType, SubPath, Value);
}

template<>
vec2 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TRANSLATION:
			return GetBoneAnimationKeyFrameTranslation(SubPath);
		case BONEANIMATION_KEYFRAME_SCALE:
			return GetBoneAnimationKeyFrameScale(SubPath);
	}
	return CAsset::GetValue<vec2>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value)
{
	switch(ValueType)
	{
		case BONEANIMATION_KEYFRAME_TRANSLATION:
			SetBoneAnimationKeyFrameTranslation(SubPath, Value);
			return true;
		case BONEANIMATION_KEYFRAME_SCALE:
			SetBoneAnimationKeyFrameScale(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec2>(ValueType, SubPath, Value);
}

template<>
vec4 CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const
{
	switch(ValueType)
	{
		case LAYERANIMATION_KEYFRAME_COLOR:
			return GetLayerAnimationKeyFrameColor(SubPath);
	}
	return CAsset::GetValue<vec4>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value)
{
	switch(ValueType)
	{
		case LAYERANIMATION_KEYFRAME_COLOR:
			SetLayerAnimationKeyFrameColor(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec4>(ValueType, SubPath, Value);
}

template<>
CAssetPath CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const
{
	switch(ValueType)
	{
		case SKELETONPATH:
			return GetSkeletonPath();
	}
	return CAsset::GetValue<CAssetPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value)
{
	switch(ValueType)
	{
		case SKELETONPATH:
			SetSkeletonPath(Value);
			return true;
	}
	return CAsset::SetValue<CAssetPath>(ValueType, SubPath, Value);
}

template<>
CSubPath CAsset_SkeletonAnimation::GetValue(int ValueType, const CSubPath& SubPath, CSubPath DefaultValue) const
{
	switch(ValueType)
	{
		case BONEANIMATION_BONEPATH:
			return GetBoneAnimationBonePath(SubPath);
		case LAYERANIMATION_LAYERPATH:
			return GetLayerAnimationLayerPath(SubPath);
	}
	return CAsset::GetValue<CSubPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_SkeletonAnimation::SetValue(int ValueType, const CSubPath& SubPath, CSubPath Value)
{
	switch(ValueType)
	{
		case BONEANIMATION_BONEPATH:
			SetBoneAnimationBonePath(SubPath, Value);
			return true;
		case LAYERANIMATION_LAYERPATH:
			SetLayerAnimationLayerPath(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<CSubPath>(ValueType, SubPath, Value);
}

int CAsset_SkeletonAnimation::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_BONEANIMATION:
			return AddBoneAnimation();
		case TYPE_BONEANIMATION_KEYFRAME:
			return AddBoneAnimationKeyFrame(SubPath);
		case TYPE_LAYERANIMATION:
			return AddLayerAnimation();
		case TYPE_LAYERANIMATION_KEYFRAME:
			return AddLayerAnimationKeyFrame(SubPath);
	}
	return -1;
}

int CAsset_SkeletonAnimation::AddSubItemAt(int Type, const CSubPath& SubPath, int Index)
{
	switch(Type)
	{
		case TYPE_BONEANIMATION:
			AddAtBoneAnimation(Index);
			return Index;
		case TYPE_BONEANIMATION_KEYFRAME:
			AddAtBoneAnimationKeyFrame(SubPath, Index);
			return Index;
		case TYPE_LAYERANIMATION:
			AddAtLayerAnimation(Index);
			return Index;
		case TYPE_LAYERANIMATION_KEYFRAME:
			AddAtLayerAnimationKeyFrame(SubPath, Index);
			return Index;
	}
	return -1;
}

void CAsset_SkeletonAnimation::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_BONEANIMATION:
			DeleteBoneAnimation(SubPath);
			break;
		case TYPE_BONEANIMATION_KEYFRAME:
			DeleteBoneAnimationKeyFrame(SubPath);
			break;
		case TYPE_LAYERANIMATION:
			DeleteLayerAnimation(SubPath);
			break;
		case TYPE_LAYERANIMATION_KEYFRAME:
			DeleteLayerAnimationKeyFrame(SubPath);
			break;
	}
}

void CAsset_SkeletonAnimation::RelMoveSubItem(CSubPath& SubPath, int RelMove)
{
	switch(SubPath.GetType())
	{
		case TYPE_BONEANIMATION:
			RelMoveBoneAnimation(SubPath, RelMove);
			break;
		case TYPE_BONEANIMATION_KEYFRAME:
			RelMoveBoneAnimationKeyFrame(SubPath, RelMove);
			break;
		case TYPE_LAYERANIMATION:
			RelMoveLayerAnimation(SubPath, RelMove);
			break;
		case TYPE_LAYERANIMATION_KEYFRAME:
			RelMoveLayerAnimationKeyFrame(SubPath, RelMove);
			break;
	}
}


