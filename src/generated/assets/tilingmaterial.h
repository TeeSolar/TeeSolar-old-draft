/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#ifndef __CLIENT_ASSETS_TILINGMATERIAL__
#define __CLIENT_ASSETS_TILINGMATERIAL__

#include <shared/assets/asset.h>
#include <cassert>
#include <vector>
#include <shared/assets/assetpath.h>
#include <shared/tl/algorithm.h>

class CAsset_TilingMaterial : public CAsset
{
public:
	enum
	{
		CONDITIONTYPE_INDEX=0,
		CONDITIONTYPE_NOTINDEX,
		CONDITIONTYPE_LABEL,
		CONDITIONTYPE_NOTLABEL,
		CONDITIONTYPE_NOBORDER,
		NUM_CONDITIONTYPES,
	};
	
	static const int TypeId = 31;
	
	enum
	{
		TYPE_ZONECONVERTER,
		TYPE_RULE_CONDITION,
		TYPE_RULE,
		TYPE_INDEX,
		TYPE_LABEL_INDEX,
		TYPE_LABEL,
	};
	
	static inline CSubPath SubPath_ZoneConverter(int Id0) { return CSubPath(TYPE_ZONECONVERTER, Id0, 0, 0); }
	static inline CSubPath SubPath_RuleCondition(int Id0, int Id1) { return CSubPath(TYPE_RULE_CONDITION, Id0, Id1, 0); }
	static inline CSubPath SubPath_Rule(int Id0) { return CSubPath(TYPE_RULE, Id0, 0, 0); }
	static inline CSubPath SubPath_Index(int Id0) { return CSubPath(TYPE_INDEX, Id0, 0, 0); }
	static inline CSubPath SubPath_LabelIndex(int Id0, int Id1) { return CSubPath(TYPE_LABEL_INDEX, Id0, Id1, 0); }
	static inline CSubPath SubPath_Label(int Id0) { return CSubPath(TYPE_LABEL, Id0, 0, 0); }
	
	enum
	{
		NAME = CAsset::NAME,
		IMAGEPATH,
		ZONECONVERTER_ARRAYSIZE,
		ZONECONVERTER_PTR,
		ZONECONVERTER_ARRAY,
		ZONECONVERTER_ZONETYPEPATH,
		ZONECONVERTER_OLDINDEX,
		ZONECONVERTER_NEWINDEX,
		ZONECONVERTER,
		RULE_ARRAYSIZE,
		RULE_PTR,
		RULE_ARRAY,
		RULE_CONDITION_ARRAYSIZE,
		RULE_CONDITION_PTR,
		RULE_CONDITION_ARRAY,
		RULE_CONDITION,
		RULE_CONDITION_TYPE,
		RULE_CONDITION_VALUE,
		RULE_CONDITION_RELPOSX,
		RULE_CONDITION_RELPOSY,
		RULE_PROBABILITY,
		RULE_TILEINDEX,
		RULE_TILEFLAGS,
		RULE,
		INDEX_ARRAYSIZE,
		INDEX_PTR,
		INDEX_ARRAY,
		INDEX_TITLE,
		INDEX,
		LABEL_ARRAYSIZE,
		LABEL_PTR,
		LABEL_ARRAY,
		LABEL_TITLE,
		LABEL_INDEX_ARRAYSIZE,
		LABEL_INDEX_PTR,
		LABEL_INDEX_ARRAY,
		LABEL_INDEX,
		LABEL,
	};
	
	class CIteratorZoneConverter
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorZoneConverter() : m_Index(0), m_Reverse(false) {}
		CIteratorZoneConverter(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorZoneConverter& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_ZoneConverter(m_Index); }
		bool operator==(const CIteratorZoneConverter& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorZoneConverter& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorZoneConverter BeginZoneConverter() const { return CIteratorZoneConverter(0, false); }
	CIteratorZoneConverter EndZoneConverter() const { return CIteratorZoneConverter(m_ZoneConverter.size(), false); }
	CIteratorZoneConverter ReverseBeginZoneConverter() const { return CIteratorZoneConverter(m_ZoneConverter.size()-1, true); }
	CIteratorZoneConverter ReverseEndZoneConverter() const { return CIteratorZoneConverter(-1, true); }
	
	class CIteratorRule
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorRule() : m_Index(0), m_Reverse(false) {}
		CIteratorRule(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorRule& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Rule(m_Index); }
		bool operator==(const CIteratorRule& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorRule& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorRule BeginRule() const { return CIteratorRule(0, false); }
	CIteratorRule EndRule() const { return CIteratorRule(m_Rule.size(), false); }
	CIteratorRule ReverseBeginRule() const { return CIteratorRule(m_Rule.size()-1, true); }
	CIteratorRule ReverseEndRule() const { return CIteratorRule(-1, true); }
	
	class CIteratorIndex
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorIndex() : m_Index(0), m_Reverse(false) {}
		CIteratorIndex(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorIndex& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Index(m_Index); }
		bool operator==(const CIteratorIndex& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorIndex& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorIndex BeginIndex() const { return CIteratorIndex(0, false); }
	CIteratorIndex EndIndex() const { return CIteratorIndex(m_Index.size(), false); }
	CIteratorIndex ReverseBeginIndex() const { return CIteratorIndex(m_Index.size()-1, true); }
	CIteratorIndex ReverseEndIndex() const { return CIteratorIndex(-1, true); }
	
	class CIteratorLabel
	{
	protected:
		int m_Index;
		bool m_Reverse;
	public:
		CIteratorLabel() : m_Index(0), m_Reverse(false) {}
		CIteratorLabel(int Index, bool Reverse) : m_Index(Index), m_Reverse(Reverse) {}
		CIteratorLabel& operator++() { if(m_Reverse) m_Index--; else m_Index++; return *this; }
		CSubPath operator*() { return SubPath_Label(m_Index); }
		bool operator==(const CIteratorLabel& Iter2) { return Iter2.m_Index == m_Index; }
		bool operator!=(const CIteratorLabel& Iter2) { return Iter2.m_Index != m_Index; }
	};
	
	CIteratorLabel BeginLabel() const { return CIteratorLabel(0, false); }
	CIteratorLabel EndLabel() const { return CIteratorLabel(m_Label.size(), false); }
	CIteratorLabel ReverseBeginLabel() const { return CIteratorLabel(m_Label.size()-1, true); }
	CIteratorLabel ReverseEndLabel() const { return CIteratorLabel(-1, true); }
	
	class CZoneConverter
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CAssetPath::CTuaType m_ZoneTypePath;
			tua_uint8 m_OldIndex;
			tua_uint8 m_NewIndex;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CAssetPath::CTuaType m_ZoneTypePath;
			tua_uint8 m_OldIndex;
			tua_uint8 m_NewIndex;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CAssetPath::CTuaType m_ZoneTypePath;
			tua_uint8 m_OldIndex;
			tua_uint8 m_NewIndex;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		CAssetPath m_ZoneTypePath;
		uint8 m_OldIndex;
		uint8 m_NewIndex;
	
	public:
		inline CAssetPath GetZoneTypePath() const { return m_ZoneTypePath; }
		
		inline uint8 GetOldIndex() const { return m_OldIndex; }
		
		inline uint8 GetNewIndex() const { return m_NewIndex; }
		
		inline void SetZoneTypePath(const CAssetPath& Value) { m_ZoneTypePath = Value; }
		
		inline void SetOldIndex(uint8 Value) { m_OldIndex = Value; }
		
		inline void SetNewIndex(uint8 Value) { m_NewIndex = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			Operation.Apply(m_ZoneTypePath);
		}
		
	};
	class CRule
	{
	public:
		class CCondition
		{
		public:
			class CTuaType_0_2_0
			{
			public:
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_0& TuaType);
			};
			
			class CTuaType_0_2_1
			{
			public:
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_1& TuaType);
			};
			
			class CTuaType_0_2_2
			{
			public:
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_2& TuaType);
			};
			
			class CTuaType_0_2_3
			{
			public:
				tua_int32 m_Type;
				tua_int32 m_Value;
				tua_int32 m_RelPosX;
				tua_int32 m_RelPosY;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_3& TuaType);
			};
			
			class CTuaType_0_2_4
			{
			public:
				tua_int32 m_Type;
				tua_int32 m_Value;
				tua_int32 m_RelPosX;
				tua_int32 m_RelPosY;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_4& TuaType);
			};
			
			class CTuaType_0_3_0
			{
			public:
				tua_int32 m_Type;
				tua_int32 m_Value;
				tua_int32 m_RelPosX;
				tua_int32 m_RelPosY;
				static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType);
				static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_3_0& TuaType);
			};
			
		
		private:
			int m_Type;
			int m_Value;
			int m_RelPosX;
			int m_RelPosY;
		
		public:
			CCondition();
			inline int GetType() const { return m_Type; }
			
			inline int GetValue() const { return m_Value; }
			
			inline int GetRelPosX() const { return m_RelPosX; }
			
			inline int GetRelPosY() const { return m_RelPosY; }
			
			inline void SetType(int Value) { m_Type = Value; }
			
			inline void SetValue(int Value) { m_Value = Value; }
			
			inline void SetRelPosX(int Value) { m_RelPosX = Value; }
			
			inline void SetRelPosY(int Value) { m_RelPosY = Value; }
			
			void AssetPathOperation(const CAssetPath::COperation& Operation)
			{
			}
			
		};
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			CTuaArray m_Condition;
			tua_float m_Probability;
			tua_uint8 m_TileIndex;
			tua_uint8 m_TileFlags;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			CTuaArray m_Condition;
			tua_float m_Probability;
			tua_uint8 m_TileIndex;
			tua_uint8 m_TileFlags;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			CTuaArray m_Condition;
			tua_float m_Probability;
			tua_uint8 m_TileIndex;
			tua_uint8 m_TileFlags;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CRule& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		std::vector<CRule::CCondition> m_Condition;
		float m_Probability;
		uint8 m_TileIndex;
		uint8 m_TileFlags;
	
	public:
		CRule();
		inline int GetConditionArraySize() const { return m_Condition.size(); }
		
		inline const CAsset_TilingMaterial::CRule::CCondition* GetConditionPtr() const { return &(m_Condition.front()); }
		
		inline const std::vector<CRule::CCondition>& GetConditionArray() const { return m_Condition; }
		inline std::vector<CRule::CCondition>& GetConditionArray() { return m_Condition; }
		
		inline const CAsset_TilingMaterial::CRule::CCondition& GetCondition(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_Condition.size());
			{
				return m_Condition[SubPath.GetId()];
			}
		}
		
		inline int GetConditionType(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Condition.size())
				return m_Condition[SubPath.GetId()].GetType();
			else return 0;
		}
		
		inline int GetConditionValue(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Condition.size())
				return m_Condition[SubPath.GetId()].GetValue();
			else return 0;
		}
		
		inline int GetConditionRelPosX(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Condition.size())
				return m_Condition[SubPath.GetId()].GetRelPosX();
			else return 0;
		}
		
		inline int GetConditionRelPosY(const CSubPath& SubPath) const
		{
			if(SubPath.GetId() < m_Condition.size())
				return m_Condition[SubPath.GetId()].GetRelPosY();
			else return 0;
		}
		
		inline float GetProbability() const { return m_Probability; }
		
		inline uint8 GetTileIndex() const { return m_TileIndex; }
		
		inline uint8 GetTileFlags() const { return m_TileFlags; }
		
		inline void SetConditionArraySize(int Value) { m_Condition.resize(Value); }
		
		inline void SetCondition(const CSubPath& SubPath, const CAsset_TilingMaterial::CRule::CCondition& Value)
		{
			if(SubPath.GetId() < m_Condition.size())
			{
				m_Condition[SubPath.GetId()] = Value;
			}
		}
		
		inline void SetConditionType(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Condition.size())
				m_Condition[SubPath.GetId()].SetType(Value);
		}
		
		inline void SetConditionValue(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Condition.size())
				m_Condition[SubPath.GetId()].SetValue(Value);
		}
		
		inline void SetConditionRelPosX(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Condition.size())
				m_Condition[SubPath.GetId()].SetRelPosX(Value);
		}
		
		inline void SetConditionRelPosY(const CSubPath& SubPath, int Value)
		{
			if(SubPath.GetId() < m_Condition.size())
				m_Condition[SubPath.GetId()].SetRelPosY(Value);
		}
		
		inline void SetProbability(float Value) { m_Probability = Value; }
		
		inline void SetTileIndex(uint8 Value) { m_TileIndex = Value; }
		
		inline void SetTileFlags(uint8 Value) { m_TileFlags = Value; }
		
		inline int AddCondition()
		{
			int Id = m_Condition.size();
			m_Condition.emplace_back();
			return Id;
		}
		
		inline void AddAtCondition(int Index) { m_Condition.insert(m_Condition.begin() + Index, CAsset_TilingMaterial::CRule::CCondition()); }
		
		inline void DeleteCondition(const CSubPath& SubPath) { m_Condition.erase(m_Condition.begin() + SubPath.GetId()); }
		
		inline void RelMoveCondition(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_Condition, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		inline bool IsValidCondition(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Condition.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
			for(unsigned int i=0; i<m_Condition.size(); i++)
			{
				m_Condition[i].AssetPathOperation(Operation);
			}
		}
		
	};
	class CIndex
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			tua_stringid m_Title;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			tua_stringid m_Title;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			tua_stringid m_Title;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CIndex& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		_dynamic_string<128> m_Title;
	
	public:
		inline const char* GetTitle() const { return m_Title.buffer(); }
		
		inline void SetTitle(const char* Value) { m_Title = Value; }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
		}
		
	};
	class CLabel
	{
	public:
		class CTuaType_0_2_0
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_0& TuaType);
		};
		
		class CTuaType_0_2_1
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_1& TuaType);
		};
		
		class CTuaType_0_2_2
		{
		public:
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_2& TuaType);
		};
		
		class CTuaType_0_2_3
		{
		public:
			tua_stringid m_Title;
			CTuaArray m_Index;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_3& TuaType);
		};
		
		class CTuaType_0_2_4
		{
		public:
			tua_stringid m_Title;
			CTuaArray m_Index;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_4& TuaType);
		};
		
		class CTuaType_0_3_0
		{
		public:
			tua_stringid m_Title;
			CTuaArray m_Index;
			static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CLabel& SysType);
			static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_3_0& TuaType);
		};
		
	
	private:
		_dynamic_string<128> m_Title;
		std::vector<uint8> m_Index;
	
	public:
		inline const char* GetTitle() const { return m_Title.buffer(); }
		
		inline int GetIndexArraySize() const { return m_Index.size(); }
		
		inline const uint8* GetIndexPtr() const { return &(m_Index.front()); }
		
		inline const std::vector<uint8>& GetIndexArray() const { return m_Index; }
		inline std::vector<uint8>& GetIndexArray() { return m_Index; }
		
		inline uint8 GetIndex(const CSubPath& SubPath) const
		{
			assert(SubPath.GetId() < m_Index.size());
			{
				return m_Index[SubPath.GetId()];
			}
		}
		
		inline void SetTitle(const char* Value) { m_Title = Value; }
		
		inline void SetIndexArraySize(int Value) { m_Index.resize(Value); }
		
		inline void SetIndex(const CSubPath& SubPath, uint8 Value)
		{
			if(SubPath.GetId() < m_Index.size())
			{
				m_Index[SubPath.GetId()] = Value;
			}
		}
		
		inline int AddIndex()
		{
			int Id = m_Index.size();
			m_Index.emplace_back();
			return Id;
		}
		
		inline void AddAtIndex(int Index) { m_Index.insert(m_Index.begin() + Index, uint8()); }
		
		inline void DeleteIndex(const CSubPath& SubPath) { m_Index.erase(m_Index.begin() + SubPath.GetId()); }
		
		inline void RelMoveIndex(CSubPath& SubPath, int RelMove)
		{
			int NewId = relative_move(m_Index, SubPath.GetId(), RelMove);
			SubPath.SetId(NewId);
		}
		
		inline bool IsValidIndex(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Index.size()); }
		
		void AssetPathOperation(const CAssetPath::COperation& Operation)
		{
		}
		
	};
	class CTuaType_0_2_0 : public CAsset::CTuaType_0_2_0
	{
	public:
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_0& TuaType);
	};
	
	class CTuaType_0_2_1 : public CAsset::CTuaType_0_2_1
	{
	public:
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_1& TuaType);
	};
	
	class CTuaType_0_2_2 : public CAsset::CTuaType_0_2_2
	{
	public:
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_2& TuaType);
	};
	
	class CTuaType_0_2_3 : public CAsset::CTuaType_0_2_3
	{
	public:
		CAssetPath::CTuaType m_ImagePath;
		CTuaArray m_ZoneConverter;
		CTuaArray m_Rule;
		CTuaArray m_Index;
		CTuaArray m_Label;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_3& TuaType);
	};
	
	class CTuaType_0_2_4 : public CAsset::CTuaType_0_2_4
	{
	public:
		CAssetPath::CTuaType m_ImagePath;
		CTuaArray m_ZoneConverter;
		CTuaArray m_Rule;
		CTuaArray m_Index;
		CTuaArray m_Label;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_4& TuaType);
	};
	
	class CTuaType_0_3_0 : public CAsset::CTuaType_0_3_0
	{
	public:
		CAssetPath::CTuaType m_ImagePath;
		CTuaArray m_ZoneConverter;
		CTuaArray m_Rule;
		CTuaArray m_Index;
		CTuaArray m_Label;
		static void Read(class CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial& SysType);
		static void Write(class CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_3_0& TuaType);
	};
	

private:
	CAssetPath m_ImagePath;
	std::vector<CAsset_TilingMaterial::CZoneConverter> m_ZoneConverter;
	std::vector<CAsset_TilingMaterial::CRule> m_Rule;
	std::vector<CAsset_TilingMaterial::CIndex> m_Index;
	std::vector<CAsset_TilingMaterial::CLabel> m_Label;

public:
	virtual ~CAsset_TilingMaterial() {}
	
	template<typename T>
	T GetValue(int ValueType, const CSubPath& SubPath, T DefaultValue) const
	{
		return CAsset::GetValue<T>(ValueType, SubPath, DefaultValue);
	}
	
	template<typename T>
	bool SetValue(int ValueType, const CSubPath& SubPath, T Value)
	{
		return CAsset::SetValue<T>(ValueType, SubPath, Value);
	}
	
	int AddSubItem(int Type, const CSubPath& SubPath);
	
	int AddSubItemAt(int Type, const CSubPath& SubPath, int Index);
	
	void DeleteSubItem(const CSubPath& SubPath);
	
	void RelMoveSubItem(CSubPath& SubPath, int RelMove);
	
	inline CAssetPath GetImagePath() const { return m_ImagePath; }
	
	inline int GetZoneConverterArraySize() const { return m_ZoneConverter.size(); }
	
	inline const CAsset_TilingMaterial::CZoneConverter* GetZoneConverterPtr() const { return &(m_ZoneConverter.front()); }
	
	inline const std::vector<CAsset_TilingMaterial::CZoneConverter>& GetZoneConverterArray() const { return m_ZoneConverter; }
	inline std::vector<CAsset_TilingMaterial::CZoneConverter>& GetZoneConverterArray() { return m_ZoneConverter; }
	
	inline const CAsset_TilingMaterial::CZoneConverter& GetZoneConverter(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_ZoneConverter.size());
		{
			return m_ZoneConverter[SubPath.GetId()];
		}
	}
	
	inline CAssetPath GetZoneConverterZoneTypePath(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			return m_ZoneConverter[SubPath.GetId()].GetZoneTypePath();
		else return CAssetPath::Null();
	}
	
	inline uint8 GetZoneConverterOldIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			return m_ZoneConverter[SubPath.GetId()].GetOldIndex();
		else return 0;
	}
	
	inline uint8 GetZoneConverterNewIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			return m_ZoneConverter[SubPath.GetId()].GetNewIndex();
		else return 0;
	}
	
	inline int GetRuleArraySize() const { return m_Rule.size(); }
	
	inline const CAsset_TilingMaterial::CRule* GetRulePtr() const { return &(m_Rule.front()); }
	
	inline const std::vector<CAsset_TilingMaterial::CRule>& GetRuleArray() const { return m_Rule; }
	inline std::vector<CAsset_TilingMaterial::CRule>& GetRuleArray() { return m_Rule; }
	
	inline const CAsset_TilingMaterial::CRule& GetRule(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Rule.size());
		{
			return m_Rule[SubPath.GetId()];
		}
	}
	
	inline int GetRuleConditionArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionArraySize();
		else return 0;
	}
	
	inline const CAsset_TilingMaterial::CRule::CCondition* GetRuleConditionPtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionPtr();
		else return NULL;
	}
	
	inline const std::vector<CRule::CCondition>& GetRuleConditionArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Rule.size());
		return m_Rule[SubPath.GetId()].GetConditionArray();
	}
	inline std::vector<CRule::CCondition>& GetRuleConditionArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_Rule.size());
		return m_Rule[SubPath.GetId()].GetConditionArray();
	}
	
	inline const CAsset_TilingMaterial::CRule::CCondition& GetRuleCondition(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Rule.size());
		return m_Rule[SubPath.GetId()].GetCondition(SubPath.PopId());
	}
	
	inline int GetRuleConditionType(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionType(SubPath.PopId());
		else return 0;
	}
	
	inline int GetRuleConditionValue(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionValue(SubPath.PopId());
		else return 0;
	}
	
	inline int GetRuleConditionRelPosX(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionRelPosX(SubPath.PopId());
		else return 0;
	}
	
	inline int GetRuleConditionRelPosY(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetConditionRelPosY(SubPath.PopId());
		else return 0;
	}
	
	inline float GetRuleProbability(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetProbability();
		else return 0.0f;
	}
	
	inline uint8 GetRuleTileIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetTileIndex();
		else return 0;
	}
	
	inline uint8 GetRuleTileFlags(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Rule.size())
			return m_Rule[SubPath.GetId()].GetTileFlags();
		else return 0;
	}
	
	inline int GetIndexArraySize() const { return m_Index.size(); }
	
	inline const CAsset_TilingMaterial::CIndex* GetIndexPtr() const { return &(m_Index.front()); }
	
	inline const std::vector<CAsset_TilingMaterial::CIndex>& GetIndexArray() const { return m_Index; }
	inline std::vector<CAsset_TilingMaterial::CIndex>& GetIndexArray() { return m_Index; }
	
	inline const CAsset_TilingMaterial::CIndex& GetIndex(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Index.size());
		{
			return m_Index[SubPath.GetId()];
		}
	}
	
	inline const char* GetIndexTitle(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Index.size())
			return m_Index[SubPath.GetId()].GetTitle();
		else return NULL;
	}
	
	inline int GetLabelArraySize() const { return m_Label.size(); }
	
	inline const CAsset_TilingMaterial::CLabel* GetLabelPtr() const { return &(m_Label.front()); }
	
	inline const std::vector<CAsset_TilingMaterial::CLabel>& GetLabelArray() const { return m_Label; }
	inline std::vector<CAsset_TilingMaterial::CLabel>& GetLabelArray() { return m_Label; }
	
	inline const CAsset_TilingMaterial::CLabel& GetLabel(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Label.size());
		{
			return m_Label[SubPath.GetId()];
		}
	}
	
	inline const char* GetLabelTitle(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetTitle();
		else return NULL;
	}
	
	inline int GetLabelIndexArraySize(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetIndexArraySize();
		else return 0;
	}
	
	inline const uint8* GetLabelIndexPtr(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetIndexPtr();
		else return NULL;
	}
	
	inline const std::vector<uint8>& GetLabelIndexArray(const CSubPath& SubPath) const
	{
		assert(SubPath.GetId() < m_Label.size());
		return m_Label[SubPath.GetId()].GetIndexArray();
	}
	inline std::vector<uint8>& GetLabelIndexArray(const CSubPath& SubPath)
	{
		assert(SubPath.GetId() < m_Label.size());
		return m_Label[SubPath.GetId()].GetIndexArray();
	}
	
	inline uint8 GetLabelIndex(const CSubPath& SubPath) const
	{
		if(SubPath.GetId() < m_Label.size())
			return m_Label[SubPath.GetId()].GetIndex(SubPath.PopId());
		else return 0;
	}
	
	inline void SetImagePath(const CAssetPath& Value) { m_ImagePath = Value; }
	
	inline void SetZoneConverterArraySize(int Value) { m_ZoneConverter.resize(Value); }
	
	inline void SetZoneConverter(const CSubPath& SubPath, const CAsset_TilingMaterial::CZoneConverter& Value)
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
		{
			m_ZoneConverter[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetZoneConverterZoneTypePath(const CSubPath& SubPath, const CAssetPath& Value)
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			m_ZoneConverter[SubPath.GetId()].SetZoneTypePath(Value);
	}
	
	inline void SetZoneConverterOldIndex(const CSubPath& SubPath, uint8 Value)
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			m_ZoneConverter[SubPath.GetId()].SetOldIndex(Value);
	}
	
	inline void SetZoneConverterNewIndex(const CSubPath& SubPath, uint8 Value)
	{
		if(SubPath.GetId() < m_ZoneConverter.size())
			m_ZoneConverter[SubPath.GetId()].SetNewIndex(Value);
	}
	
	inline void SetRuleArraySize(int Value) { m_Rule.resize(Value); }
	
	inline void SetRule(const CSubPath& SubPath, const CAsset_TilingMaterial::CRule& Value)
	{
		if(SubPath.GetId() < m_Rule.size())
		{
			m_Rule[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetRuleConditionArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetConditionArraySize(Value);
	}
	
	inline void SetRuleCondition(const CSubPath& SubPath, const CAsset_TilingMaterial::CRule::CCondition& Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetCondition(SubPath.PopId(), Value);
	}
	
	inline void SetRuleConditionType(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetConditionType(SubPath.PopId(), Value);
	}
	
	inline void SetRuleConditionValue(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetConditionValue(SubPath.PopId(), Value);
	}
	
	inline void SetRuleConditionRelPosX(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetConditionRelPosX(SubPath.PopId(), Value);
	}
	
	inline void SetRuleConditionRelPosY(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetConditionRelPosY(SubPath.PopId(), Value);
	}
	
	inline void SetRuleProbability(const CSubPath& SubPath, float Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetProbability(Value);
	}
	
	inline void SetRuleTileIndex(const CSubPath& SubPath, uint8 Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetTileIndex(Value);
	}
	
	inline void SetRuleTileFlags(const CSubPath& SubPath, uint8 Value)
	{
		if(SubPath.GetId() < m_Rule.size())
			m_Rule[SubPath.GetId()].SetTileFlags(Value);
	}
	
	inline void SetIndexArraySize(int Value) { m_Index.resize(Value); }
	
	inline void SetIndex(const CSubPath& SubPath, const CAsset_TilingMaterial::CIndex& Value)
	{
		if(SubPath.GetId() < m_Index.size())
		{
			m_Index[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetIndexTitle(const CSubPath& SubPath, const char* Value)
	{
		if(SubPath.GetId() < m_Index.size())
			m_Index[SubPath.GetId()].SetTitle(Value);
	}
	
	inline void SetLabelArraySize(int Value) { m_Label.resize(Value); }
	
	inline void SetLabel(const CSubPath& SubPath, const CAsset_TilingMaterial::CLabel& Value)
	{
		if(SubPath.GetId() < m_Label.size())
		{
			m_Label[SubPath.GetId()] = Value;
		}
	}
	
	inline void SetLabelTitle(const CSubPath& SubPath, const char* Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetTitle(Value);
	}
	
	inline void SetLabelIndexArraySize(const CSubPath& SubPath, int Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetIndexArraySize(Value);
	}
	
	inline void SetLabelIndex(const CSubPath& SubPath, uint8 Value)
	{
		if(SubPath.GetId() < m_Label.size())
			m_Label[SubPath.GetId()].SetIndex(SubPath.PopId(), Value);
	}
	
	inline int AddZoneConverter()
	{
		int Id = m_ZoneConverter.size();
		m_ZoneConverter.emplace_back();
		return Id;
	}
	
	inline int AddRule()
	{
		int Id = m_Rule.size();
		m_Rule.emplace_back();
		return Id;
	}
	
	inline int AddRuleCondition(const CSubPath& SubPath) { return m_Rule[SubPath.GetId()].AddCondition(); }
	
	inline int AddIndex()
	{
		int Id = m_Index.size();
		m_Index.emplace_back();
		return Id;
	}
	
	inline int AddLabel()
	{
		int Id = m_Label.size();
		m_Label.emplace_back();
		return Id;
	}
	
	inline int AddLabelIndex(const CSubPath& SubPath) { return m_Label[SubPath.GetId()].AddIndex(); }
	
	inline void AddAtZoneConverter(int Index) { m_ZoneConverter.insert(m_ZoneConverter.begin() + Index, CAsset_TilingMaterial::CZoneConverter()); }
	
	inline void AddAtRule(int Index) { m_Rule.insert(m_Rule.begin() + Index, CAsset_TilingMaterial::CRule()); }
	
	inline void AddAtRuleCondition(const CSubPath& SubPath, int Index) { m_Rule[SubPath.GetId()].AddAtCondition(Index); }
	
	inline void AddAtIndex(int Index) { m_Index.insert(m_Index.begin() + Index, CAsset_TilingMaterial::CIndex()); }
	
	inline void AddAtLabel(int Index) { m_Label.insert(m_Label.begin() + Index, CAsset_TilingMaterial::CLabel()); }
	
	inline void AddAtLabelIndex(const CSubPath& SubPath, int Index) { m_Label[SubPath.GetId()].AddAtIndex(Index); }
	
	inline void DeleteZoneConverter(const CSubPath& SubPath) { m_ZoneConverter.erase(m_ZoneConverter.begin() + SubPath.GetId()); }
	
	inline void DeleteRule(const CSubPath& SubPath) { m_Rule.erase(m_Rule.begin() + SubPath.GetId()); }
	
	inline void DeleteRuleCondition(const CSubPath& SubPath) { m_Rule[SubPath.GetId()].DeleteCondition(SubPath.PopId()); }
	
	inline void DeleteIndex(const CSubPath& SubPath) { m_Index.erase(m_Index.begin() + SubPath.GetId()); }
	
	inline void DeleteLabel(const CSubPath& SubPath) { m_Label.erase(m_Label.begin() + SubPath.GetId()); }
	
	inline void DeleteLabelIndex(const CSubPath& SubPath) { m_Label[SubPath.GetId()].DeleteIndex(SubPath.PopId()); }
	
	inline void RelMoveZoneConverter(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_ZoneConverter, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveRule(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Rule, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveRuleCondition(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_Rule[SubPath.GetId()].RelMoveCondition(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	inline void RelMoveIndex(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Index, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveLabel(CSubPath& SubPath, int RelMove)
	{
		int NewId = relative_move(m_Label, SubPath.GetId(), RelMove);
		SubPath.SetId(NewId);
	}
	
	inline void RelMoveLabelIndex(CSubPath& SubPath, int RelMove)
	{
		CSubPath ChildSubPath = SubPath.PopId();
		m_Label[SubPath.GetId()].RelMoveIndex(ChildSubPath, RelMove);
		SubPath.SetId2(ChildSubPath.GetId());
	}
	
	inline bool IsValidZoneConverter(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_ZoneConverter.size()); }
	
	inline bool IsValidRule(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Rule.size()); }
	
	inline bool IsValidRuleCondition(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Rule.size() && m_Rule[SubPath.GetId()].IsValidCondition(SubPath.PopId())); }
	
	inline bool IsValidIndex(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Index.size()); }
	
	inline bool IsValidLabel(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Label.size()); }
	
	inline bool IsValidLabelIndex(const CSubPath& SubPath) const { return (SubPath.IsNotNull() && SubPath.GetId() < m_Label.size() && m_Label[SubPath.GetId()].IsValidIndex(SubPath.PopId())); }
	
	void AssetPathOperation(const CAssetPath::COperation& Operation)
	{
		Operation.Apply(m_ImagePath);
		for(unsigned int i=0; i<m_ZoneConverter.size(); i++)
		{
			m_ZoneConverter[i].AssetPathOperation(Operation);
		}
		for(unsigned int i=0; i<m_Rule.size(); i++)
		{
			m_Rule[i].AssetPathOperation(Operation);
		}
		for(unsigned int i=0; i<m_Index.size(); i++)
		{
			m_Index[i].AssetPathOperation(Operation);
		}
		for(unsigned int i=0; i<m_Label.size(); i++)
		{
			m_Label[i].AssetPathOperation(Operation);
		}
	}
	
};

template<> int CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const;
template<> bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, int Value);
template<> const char* CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, const char* DefaultValue) const;
template<> bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, const char* Value);
template<> float CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const;
template<> bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, float Value);
template<> CAssetPath CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const;
template<> bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value);

#endif
