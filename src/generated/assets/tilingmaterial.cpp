/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/tilingmaterial.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_TilingMaterial::CRule::CCondition::CCondition()
{
	m_Type = CONDITIONTYPE_INDEX;
	m_Value = 1;
	m_RelPosX = 0;
	m_RelPosY = 0;
}

CAsset_TilingMaterial::CRule::CRule()
{
	m_Probability = 1.0f;
	m_TileIndex = 1;
	m_TileFlags = 0x0;
}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
}


void CAsset_TilingMaterial::CRule::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
}


void CAsset_TilingMaterial::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_0& TuaType)
{
}

void CAsset_TilingMaterial::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

}

void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
}


void CAsset_TilingMaterial::CRule::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
}


void CAsset_TilingMaterial::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_1& TuaType)
{
}

void CAsset_TilingMaterial::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

}

void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
}


void CAsset_TilingMaterial::CRule::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
}


void CAsset_TilingMaterial::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_2& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_2& TuaType)
{
}

void CAsset_TilingMaterial::CRule::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_2& TuaType)
{
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_2& TuaType)
{
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_2& TuaType)
{
}

void CAsset_TilingMaterial::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

}

void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
	pLoadingContext->ReadAssetPath(TuaType.m_ZoneTypePath, SysType.m_ZoneTypePath);
	SysType.m_OldIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_OldIndex);
	SysType.m_NewIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_NewIndex);
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
	SysType.m_Type = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Type);
	SysType.m_Value = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Value);
	SysType.m_RelPosX = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosX);
	SysType.m_RelPosY = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosY);
}


void CAsset_TilingMaterial::CRule::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
	{
		const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3* pData = (const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Condition.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Condition.m_Size);
		SysType.m_Condition.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Condition[i]);
		}
	}
	
	SysType.m_Probability = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Probability);
	SysType.m_TileIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileIndex);
	SysType.m_TileFlags = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileFlags);
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	{
		const tua_uint8* pData = (const tua_uint8*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Index[i] = pLoadingContext->ArchiveFile()->ReadUInt8(pData[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3* pData = (const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_ZoneConverter.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_ZoneConverter.m_Size);
		SysType.m_ZoneConverter.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_ZoneConverter[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CRule::CTuaType_0_2_3* pData = (const CAsset_TilingMaterial::CRule::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Rule.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Rule.m_Size);
		SysType.m_Rule.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Rule[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CIndex::CTuaType_0_2_3* pData = (const CAsset_TilingMaterial::CIndex::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CLabel::CTuaType_0_2_3* pData = (const CAsset_TilingMaterial::CLabel::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Label.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Label.m_Size);
		SysType.m_Label.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Label[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_3& TuaType)
{
	pLoadingContext->WriteAssetPath(SysType.m_ZoneTypePath, TuaType.m_ZoneTypePath);
	TuaType.m_OldIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_OldIndex);
	TuaType.m_NewIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_NewIndex);
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Type = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Type);
	TuaType.m_Value = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Value);
	TuaType.m_RelPosX = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosX);
	TuaType.m_RelPosY = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosY);
}

void CAsset_TilingMaterial::CRule::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_3& TuaType)
{
	{
		TuaType.m_Condition.m_Size = SysType.m_Condition.size();
		CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3* pData = new CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3[SysType.m_Condition.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3)*SysType.m_Condition.size());
		for(unsigned int i=0; i<SysType.m_Condition.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Condition[i], pData[i]);
		}
		TuaType.m_Condition.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_3)*SysType.m_Condition.size());
		delete[] pData;
	}
	TuaType.m_Probability = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Probability);
	TuaType.m_TileIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileIndex);
	TuaType.m_TileFlags = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileFlags);
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		tua_uint8* pData = new tua_uint8[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_Index[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		delete[] pData;
	}
}

void CAsset_TilingMaterial::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_ZoneConverter.m_Size = SysType.m_ZoneConverter.size();
		CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3* pData = new CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3[SysType.m_ZoneConverter.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3)*SysType.m_ZoneConverter.size());
		for(unsigned int i=0; i<SysType.m_ZoneConverter.size(); i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_ZoneConverter[i], pData[i]);
		}
		TuaType.m_ZoneConverter.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_3)*SysType.m_ZoneConverter.size());
		delete[] pData;
	}
	{
		TuaType.m_Rule.m_Size = SysType.m_Rule.size();
		CAsset_TilingMaterial::CRule::CTuaType_0_2_3* pData = new CAsset_TilingMaterial::CRule::CTuaType_0_2_3[SysType.m_Rule.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_2_3)*SysType.m_Rule.size());
		for(unsigned int i=0; i<SysType.m_Rule.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Rule[i], pData[i]);
		}
		TuaType.m_Rule.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_2_3)*SysType.m_Rule.size());
		delete[] pData;
	}
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_TilingMaterial::CIndex::CTuaType_0_2_3* pData = new CAsset_TilingMaterial::CIndex::CTuaType_0_2_3[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_2_3)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_2_3)*SysType.m_Index.size());
		delete[] pData;
	}
	{
		TuaType.m_Label.m_Size = SysType.m_Label.size();
		CAsset_TilingMaterial::CLabel::CTuaType_0_2_3* pData = new CAsset_TilingMaterial::CLabel::CTuaType_0_2_3[SysType.m_Label.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_2_3)*SysType.m_Label.size());
		for(unsigned int i=0; i<SysType.m_Label.size(); i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Label[i], pData[i]);
		}
		TuaType.m_Label.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_2_3)*SysType.m_Label.size());
		delete[] pData;
	}
}

void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
	pLoadingContext->ReadAssetPath(TuaType.m_ZoneTypePath, SysType.m_ZoneTypePath);
	SysType.m_OldIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_OldIndex);
	SysType.m_NewIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_NewIndex);
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
	SysType.m_Type = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Type);
	SysType.m_Value = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Value);
	SysType.m_RelPosX = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosX);
	SysType.m_RelPosY = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosY);
}


void CAsset_TilingMaterial::CRule::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
	{
		const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4* pData = (const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Condition.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Condition.m_Size);
		SysType.m_Condition.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Condition[i]);
		}
	}
	
	SysType.m_Probability = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Probability);
	SysType.m_TileIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileIndex);
	SysType.m_TileFlags = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileFlags);
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	{
		const tua_uint8* pData = (const tua_uint8*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Index[i] = pLoadingContext->ArchiveFile()->ReadUInt8(pData[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4* pData = (const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_ZoneConverter.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_ZoneConverter.m_Size);
		SysType.m_ZoneConverter.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_ZoneConverter[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CRule::CTuaType_0_2_4* pData = (const CAsset_TilingMaterial::CRule::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Rule.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Rule.m_Size);
		SysType.m_Rule.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Rule[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CIndex::CTuaType_0_2_4* pData = (const CAsset_TilingMaterial::CIndex::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CLabel::CTuaType_0_2_4* pData = (const CAsset_TilingMaterial::CLabel::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Label.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Label.m_Size);
		SysType.m_Label.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Label[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_2_4& TuaType)
{
	pLoadingContext->WriteAssetPath(SysType.m_ZoneTypePath, TuaType.m_ZoneTypePath);
	TuaType.m_OldIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_OldIndex);
	TuaType.m_NewIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_NewIndex);
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Type = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Type);
	TuaType.m_Value = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Value);
	TuaType.m_RelPosX = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosX);
	TuaType.m_RelPosY = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosY);
}

void CAsset_TilingMaterial::CRule::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_2_4& TuaType)
{
	{
		TuaType.m_Condition.m_Size = SysType.m_Condition.size();
		CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4* pData = new CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4[SysType.m_Condition.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4)*SysType.m_Condition.size());
		for(unsigned int i=0; i<SysType.m_Condition.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Condition[i], pData[i]);
		}
		TuaType.m_Condition.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_2_4)*SysType.m_Condition.size());
		delete[] pData;
	}
	TuaType.m_Probability = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Probability);
	TuaType.m_TileIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileIndex);
	TuaType.m_TileFlags = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileFlags);
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		tua_uint8* pData = new tua_uint8[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_Index[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		delete[] pData;
	}
}

void CAsset_TilingMaterial::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_ZoneConverter.m_Size = SysType.m_ZoneConverter.size();
		CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4* pData = new CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4[SysType.m_ZoneConverter.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4)*SysType.m_ZoneConverter.size());
		for(unsigned int i=0; i<SysType.m_ZoneConverter.size(); i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_ZoneConverter[i], pData[i]);
		}
		TuaType.m_ZoneConverter.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_2_4)*SysType.m_ZoneConverter.size());
		delete[] pData;
	}
	{
		TuaType.m_Rule.m_Size = SysType.m_Rule.size();
		CAsset_TilingMaterial::CRule::CTuaType_0_2_4* pData = new CAsset_TilingMaterial::CRule::CTuaType_0_2_4[SysType.m_Rule.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_2_4)*SysType.m_Rule.size());
		for(unsigned int i=0; i<SysType.m_Rule.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Rule[i], pData[i]);
		}
		TuaType.m_Rule.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_2_4)*SysType.m_Rule.size());
		delete[] pData;
	}
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_TilingMaterial::CIndex::CTuaType_0_2_4* pData = new CAsset_TilingMaterial::CIndex::CTuaType_0_2_4[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_2_4)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_2_4)*SysType.m_Index.size());
		delete[] pData;
	}
	{
		TuaType.m_Label.m_Size = SysType.m_Label.size();
		CAsset_TilingMaterial::CLabel::CTuaType_0_2_4* pData = new CAsset_TilingMaterial::CLabel::CTuaType_0_2_4[SysType.m_Label.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_2_4)*SysType.m_Label.size());
		for(unsigned int i=0; i<SysType.m_Label.size(); i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Label[i], pData[i]);
		}
		TuaType.m_Label.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_2_4)*SysType.m_Label.size());
		delete[] pData;
	}
}

void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CZoneConverter& SysType)
{
	pLoadingContext->ReadAssetPath(TuaType.m_ZoneTypePath, SysType.m_ZoneTypePath);
	SysType.m_OldIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_OldIndex);
	SysType.m_NewIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_NewIndex);
}


void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CRule::CCondition& SysType)
{
	SysType.m_Type = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Type);
	SysType.m_Value = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_Value);
	SysType.m_RelPosX = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosX);
	SysType.m_RelPosY = pLoadingContext->ArchiveFile()->ReadInt32(TuaType.m_RelPosY);
}


void CAsset_TilingMaterial::CRule::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CRule& SysType)
{
	{
		const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0* pData = (const CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Condition.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Condition.m_Size);
		SysType.m_Condition.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Condition[i]);
		}
	}
	
	SysType.m_Probability = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Probability);
	SysType.m_TileIndex = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileIndex);
	SysType.m_TileFlags = pLoadingContext->ArchiveFile()->ReadUInt8(TuaType.m_TileFlags);
}


void CAsset_TilingMaterial::CIndex::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CIndex& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
}


void CAsset_TilingMaterial::CLabel::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial::CLabel& SysType)
{
	SysType.m_Title = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Title);
	{
		const tua_uint8* pData = (const tua_uint8*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			SysType.m_Index[i] = pLoadingContext->ArchiveFile()->ReadUInt8(pData[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_TilingMaterial& SysType)
{
	CAsset::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	pLoadingContext->ReadAssetPath(TuaType.m_ImagePath, SysType.m_ImagePath);
	{
		const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0* pData = (const CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_ZoneConverter.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_ZoneConverter.m_Size);
		SysType.m_ZoneConverter.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_ZoneConverter[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CRule::CTuaType_0_3_0* pData = (const CAsset_TilingMaterial::CRule::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Rule.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Rule.m_Size);
		SysType.m_Rule.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Rule[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CIndex::CTuaType_0_3_0* pData = (const CAsset_TilingMaterial::CIndex::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Index.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Index.m_Size);
		SysType.m_Index.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Index[i]);
		}
	}
	
	{
		const CAsset_TilingMaterial::CLabel::CTuaType_0_3_0* pData = (const CAsset_TilingMaterial::CLabel::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Label.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Label.m_Size);
		SysType.m_Label.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Label[i]);
		}
	}
	
}


void CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CZoneConverter& SysType, CTuaType_0_3_0& TuaType)
{
	pLoadingContext->WriteAssetPath(SysType.m_ZoneTypePath, TuaType.m_ZoneTypePath);
	TuaType.m_OldIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_OldIndex);
	TuaType.m_NewIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_NewIndex);
}

void CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule::CCondition& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Type = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Type);
	TuaType.m_Value = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_Value);
	TuaType.m_RelPosX = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosX);
	TuaType.m_RelPosY = pLoadingContext->ArchiveFile()->WriteInt32(SysType.m_RelPosY);
}

void CAsset_TilingMaterial::CRule::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CRule& SysType, CTuaType_0_3_0& TuaType)
{
	{
		TuaType.m_Condition.m_Size = SysType.m_Condition.size();
		CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0* pData = new CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0[SysType.m_Condition.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0)*SysType.m_Condition.size());
		for(unsigned int i=0; i<SysType.m_Condition.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Condition[i], pData[i]);
		}
		TuaType.m_Condition.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CCondition::CTuaType_0_3_0)*SysType.m_Condition.size());
		delete[] pData;
	}
	TuaType.m_Probability = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Probability);
	TuaType.m_TileIndex = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileIndex);
	TuaType.m_TileFlags = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_TileFlags);
}

void CAsset_TilingMaterial::CIndex::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CIndex& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
}

void CAsset_TilingMaterial::CLabel::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial::CLabel& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Title = pLoadingContext->ArchiveFile()->AddString(SysType.m_Title.buffer());
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		tua_uint8* pData = new tua_uint8[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			pData[i] = pLoadingContext->ArchiveFile()->WriteUInt8(SysType.m_Index[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(tua_uint8)*SysType.m_Index.size());
		delete[] pData;
	}
}

void CAsset_TilingMaterial::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_TilingMaterial& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	pLoadingContext->WriteAssetPath(SysType.m_ImagePath, TuaType.m_ImagePath);
	{
		TuaType.m_ZoneConverter.m_Size = SysType.m_ZoneConverter.size();
		CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0* pData = new CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0[SysType.m_ZoneConverter.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0)*SysType.m_ZoneConverter.size());
		for(unsigned int i=0; i<SysType.m_ZoneConverter.size(); i++)
		{
			CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_ZoneConverter[i], pData[i]);
		}
		TuaType.m_ZoneConverter.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CZoneConverter::CTuaType_0_3_0)*SysType.m_ZoneConverter.size());
		delete[] pData;
	}
	{
		TuaType.m_Rule.m_Size = SysType.m_Rule.size();
		CAsset_TilingMaterial::CRule::CTuaType_0_3_0* pData = new CAsset_TilingMaterial::CRule::CTuaType_0_3_0[SysType.m_Rule.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_3_0)*SysType.m_Rule.size());
		for(unsigned int i=0; i<SysType.m_Rule.size(); i++)
		{
			CAsset_TilingMaterial::CRule::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Rule[i], pData[i]);
		}
		TuaType.m_Rule.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CRule::CTuaType_0_3_0)*SysType.m_Rule.size());
		delete[] pData;
	}
	{
		TuaType.m_Index.m_Size = SysType.m_Index.size();
		CAsset_TilingMaterial::CIndex::CTuaType_0_3_0* pData = new CAsset_TilingMaterial::CIndex::CTuaType_0_3_0[SysType.m_Index.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_3_0)*SysType.m_Index.size());
		for(unsigned int i=0; i<SysType.m_Index.size(); i++)
		{
			CAsset_TilingMaterial::CIndex::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Index[i], pData[i]);
		}
		TuaType.m_Index.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CIndex::CTuaType_0_3_0)*SysType.m_Index.size());
		delete[] pData;
	}
	{
		TuaType.m_Label.m_Size = SysType.m_Label.size();
		CAsset_TilingMaterial::CLabel::CTuaType_0_3_0* pData = new CAsset_TilingMaterial::CLabel::CTuaType_0_3_0[SysType.m_Label.size()];
		mem_zero((void*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_3_0)*SysType.m_Label.size());
		for(unsigned int i=0; i<SysType.m_Label.size(); i++)
		{
			CAsset_TilingMaterial::CLabel::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Label[i], pData[i]);
		}
		TuaType.m_Label.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_TilingMaterial::CLabel::CTuaType_0_3_0)*SysType.m_Label.size());
		delete[] pData;
	}
}

template<>
int CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case ZONECONVERTER_ARRAYSIZE:
			return GetZoneConverterArraySize();
		case ZONECONVERTER_OLDINDEX:
			return GetZoneConverterOldIndex(SubPath);
		case ZONECONVERTER_NEWINDEX:
			return GetZoneConverterNewIndex(SubPath);
		case RULE_ARRAYSIZE:
			return GetRuleArraySize();
		case RULE_CONDITION_ARRAYSIZE:
			return GetRuleConditionArraySize(SubPath);
		case RULE_CONDITION_TYPE:
			return GetRuleConditionType(SubPath);
		case RULE_CONDITION_VALUE:
			return GetRuleConditionValue(SubPath);
		case RULE_CONDITION_RELPOSX:
			return GetRuleConditionRelPosX(SubPath);
		case RULE_CONDITION_RELPOSY:
			return GetRuleConditionRelPosY(SubPath);
		case RULE_TILEINDEX:
			return GetRuleTileIndex(SubPath);
		case RULE_TILEFLAGS:
			return GetRuleTileFlags(SubPath);
		case INDEX_ARRAYSIZE:
			return GetIndexArraySize();
		case LABEL_ARRAYSIZE:
			return GetLabelArraySize();
		case LABEL_INDEX_ARRAYSIZE:
			return GetLabelIndexArraySize(SubPath);
		case LABEL_INDEX:
			return GetLabelIndex(SubPath);
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case ZONECONVERTER_ARRAYSIZE:
			SetZoneConverterArraySize(Value);
			return true;
		case ZONECONVERTER_OLDINDEX:
			SetZoneConverterOldIndex(SubPath, Value);
			return true;
		case ZONECONVERTER_NEWINDEX:
			SetZoneConverterNewIndex(SubPath, Value);
			return true;
		case RULE_ARRAYSIZE:
			SetRuleArraySize(Value);
			return true;
		case RULE_CONDITION_ARRAYSIZE:
			SetRuleConditionArraySize(SubPath, Value);
			return true;
		case RULE_CONDITION_TYPE:
			SetRuleConditionType(SubPath, Value);
			return true;
		case RULE_CONDITION_VALUE:
			SetRuleConditionValue(SubPath, Value);
			return true;
		case RULE_CONDITION_RELPOSX:
			SetRuleConditionRelPosX(SubPath, Value);
			return true;
		case RULE_CONDITION_RELPOSY:
			SetRuleConditionRelPosY(SubPath, Value);
			return true;
		case RULE_TILEINDEX:
			SetRuleTileIndex(SubPath, Value);
			return true;
		case RULE_TILEFLAGS:
			SetRuleTileFlags(SubPath, Value);
			return true;
		case INDEX_ARRAYSIZE:
			SetIndexArraySize(Value);
			return true;
		case LABEL_ARRAYSIZE:
			SetLabelArraySize(Value);
			return true;
		case LABEL_INDEX_ARRAYSIZE:
			SetLabelIndexArraySize(SubPath, Value);
			return true;
		case LABEL_INDEX:
			SetLabelIndex(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
const char* CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, const char* DefaultValue) const
{
	switch(ValueType)
	{
		case INDEX_TITLE:
			return GetIndexTitle(SubPath);
		case LABEL_TITLE:
			return GetLabelTitle(SubPath);
	}
	return CAsset::GetValue<const char*>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, const char* Value)
{
	switch(ValueType)
	{
		case INDEX_TITLE:
			SetIndexTitle(SubPath, Value);
			return true;
		case LABEL_TITLE:
			SetLabelTitle(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<const char*>(ValueType, SubPath, Value);
}

template<>
float CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const
{
	switch(ValueType)
	{
		case RULE_PROBABILITY:
			return GetRuleProbability(SubPath);
	}
	return CAsset::GetValue<float>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, float Value)
{
	switch(ValueType)
	{
		case RULE_PROBABILITY:
			SetRuleProbability(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<float>(ValueType, SubPath, Value);
}

template<>
CAssetPath CAsset_TilingMaterial::GetValue(int ValueType, const CSubPath& SubPath, CAssetPath DefaultValue) const
{
	switch(ValueType)
	{
		case IMAGEPATH:
			return GetImagePath();
		case ZONECONVERTER_ZONETYPEPATH:
			return GetZoneConverterZoneTypePath(SubPath);
	}
	return CAsset::GetValue<CAssetPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_TilingMaterial::SetValue(int ValueType, const CSubPath& SubPath, CAssetPath Value)
{
	switch(ValueType)
	{
		case IMAGEPATH:
			SetImagePath(Value);
			return true;
		case ZONECONVERTER_ZONETYPEPATH:
			SetZoneConverterZoneTypePath(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<CAssetPath>(ValueType, SubPath, Value);
}

int CAsset_TilingMaterial::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_ZONECONVERTER:
			return AddZoneConverter();
		case TYPE_RULE:
			return AddRule();
		case TYPE_RULE_CONDITION:
			return AddRuleCondition(SubPath);
		case TYPE_INDEX:
			return AddIndex();
		case TYPE_LABEL:
			return AddLabel();
		case TYPE_LABEL_INDEX:
			return AddLabelIndex(SubPath);
	}
	return -1;
}

int CAsset_TilingMaterial::AddSubItemAt(int Type, const CSubPath& SubPath, int Index)
{
	switch(Type)
	{
		case TYPE_ZONECONVERTER:
			AddAtZoneConverter(Index);
			return Index;
		case TYPE_RULE:
			AddAtRule(Index);
			return Index;
		case TYPE_RULE_CONDITION:
			AddAtRuleCondition(SubPath, Index);
			return Index;
		case TYPE_INDEX:
			AddAtIndex(Index);
			return Index;
		case TYPE_LABEL:
			AddAtLabel(Index);
			return Index;
		case TYPE_LABEL_INDEX:
			AddAtLabelIndex(SubPath, Index);
			return Index;
	}
	return -1;
}

void CAsset_TilingMaterial::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_ZONECONVERTER:
			DeleteZoneConverter(SubPath);
			break;
		case TYPE_RULE:
			DeleteRule(SubPath);
			break;
		case TYPE_RULE_CONDITION:
			DeleteRuleCondition(SubPath);
			break;
		case TYPE_INDEX:
			DeleteIndex(SubPath);
			break;
		case TYPE_LABEL:
			DeleteLabel(SubPath);
			break;
		case TYPE_LABEL_INDEX:
			DeleteLabelIndex(SubPath);
			break;
	}
}

void CAsset_TilingMaterial::RelMoveSubItem(CSubPath& SubPath, int RelMove)
{
	switch(SubPath.GetType())
	{
		case TYPE_ZONECONVERTER:
			RelMoveZoneConverter(SubPath, RelMove);
			break;
		case TYPE_RULE:
			RelMoveRule(SubPath, RelMove);
			break;
		case TYPE_RULE_CONDITION:
			RelMoveRuleCondition(SubPath, RelMove);
			break;
		case TYPE_INDEX:
			RelMoveIndex(SubPath, RelMove);
			break;
		case TYPE_LABEL:
			RelMoveLabel(SubPath, RelMove);
			break;
		case TYPE_LABEL_INDEX:
			RelMoveLabelIndex(SubPath, RelMove);
			break;
	}
}


