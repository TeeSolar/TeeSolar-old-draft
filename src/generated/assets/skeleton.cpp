/*
 * Copyright (C) 2016 necropotame (necropotame@gmail.com)
 * 
 * This file is part of TeeUniverse.
 * 
 * TeeUniverse is free software: you can redistribute it and/or  modify
 * it under the terms of the GNU Affero General Public License, version 3,
 * as published by the Free Software Foundation.
 *
 * TeeUniverse is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with TeeUniverse.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * THIS FILE HAS BEEN GENERATED BY A SCRIPT.
 * DO NOT EDIT MANUALLY!
 *
 * Please use the script "scripts/assets/assets.py" to regenerate it.
 *
 * Why this file is generated by a script?
 * Because there is more than 10 files that follow the same format.
 * In addition, each time a new member is added, enums, getter, setters,
 * copy/transfert functions and storage structure must be updated.
 * It's too much to avoid mistakes.
 */

#include <generated/assets/skeleton.h>
#include <shared/assets/assetssaveloadcontext.h>
#include <shared/archivefile.h>

CAsset_Skeleton::CBone::CBone()
{
	m_Length = 32.0f;
	m_Anchor = 0.0f;
	m_Translation = 0.0f;
	m_Angle = 0.0f;
	m_Color = 1.0f;
}


void CAsset_Skeleton::CBone::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_2_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_0& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_2_0::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_2_0* pData = (const CAsset_Skeleton::CBone::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_2_0* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_2_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_0::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_2_0& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_2_0& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_2_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_2_0& TuaType)
{
	CAsset::CTuaType_0_2_0::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_2_0* pData = new CAsset_Skeleton::CBone::CTuaType_0_2_0[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_0)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_0)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_2_0* pData = new CAsset_Skeleton::CLayer::CTuaType_0_2_0[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_0)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_0::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_0)*SysType.m_Layer.size());
		delete[] pData;
	}
}

void CAsset_Skeleton::CBone::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_2_1::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_1& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_2_1::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_2_1* pData = (const CAsset_Skeleton::CBone::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_2_1* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_2_1*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_1::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_2_1& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_2_1& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_2_1::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_2_1& TuaType)
{
	CAsset::CTuaType_0_2_1::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_2_1* pData = new CAsset_Skeleton::CBone::CTuaType_0_2_1[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_1)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_1)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_2_1* pData = new CAsset_Skeleton::CLayer::CTuaType_0_2_1[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_1)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_1::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_1)*SysType.m_Layer.size());
		delete[] pData;
	}
}

void CAsset_Skeleton::CBone::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_2_2::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_2& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_2_2::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_2_2* pData = (const CAsset_Skeleton::CBone::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_2_2* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_2_2*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_2::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_2_2& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_2_2& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_2_2::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_2_2& TuaType)
{
	CAsset::CTuaType_0_2_2::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_2_2* pData = new CAsset_Skeleton::CBone::CTuaType_0_2_2[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_2)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_2)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_2_2* pData = new CAsset_Skeleton::CLayer::CTuaType_0_2_2[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_2)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_2::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_2)*SysType.m_Layer.size());
		delete[] pData;
	}
}

void CAsset_Skeleton::CBone::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_2_3::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_3& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_2_3::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_2_3* pData = (const CAsset_Skeleton::CBone::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_2_3* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_2_3*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_3::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_2_3& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_2_3& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_2_3::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_2_3& TuaType)
{
	CAsset::CTuaType_0_2_3::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_2_3* pData = new CAsset_Skeleton::CBone::CTuaType_0_2_3[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_3)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_3)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_2_3* pData = new CAsset_Skeleton::CLayer::CTuaType_0_2_3[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_3)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_3::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_3)*SysType.m_Layer.size());
		delete[] pData;
	}
}

void CAsset_Skeleton::CBone::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_2_4::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_2_4& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_2_4::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_2_4* pData = (const CAsset_Skeleton::CBone::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_2_4* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_2_4*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_4::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_2_4& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_2_4& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_2_4::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_2_4& TuaType)
{
	CAsset::CTuaType_0_2_4::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_2_4* pData = new CAsset_Skeleton::CBone::CTuaType_0_2_4[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_4)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_2_4)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_2_4* pData = new CAsset_Skeleton::CLayer::CTuaType_0_2_4[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_4)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_2_4::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_2_4)*SysType.m_Layer.size());
		delete[] pData;
	}
}

void CAsset_Skeleton::CBone::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_Skeleton::CBone& SysType)
{
	CSubPath::CTuaType::Read(pLoadingContext->ArchiveFile(), TuaType.m_Parent, SysType.m_Parent);
	SysType.m_Length = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Length);
	SysType.m_Anchor = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Anchor);
	SysType.m_Translation.x = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_X);
	SysType.m_Translation.y = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Translation.m_Y);
	SysType.m_Angle = pLoadingContext->ArchiveFile()->ReadFloat(TuaType.m_Angle);
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
	SysType.m_Color = pLoadingContext->ArchiveFile()->ReadColor(TuaType.m_Color);
}


void CAsset_Skeleton::CLayer::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_Skeleton::CLayer& SysType)
{
	SysType.m_Name = pLoadingContext->ArchiveFile()->GetString(TuaType.m_Name);
}


void CAsset_Skeleton::CTuaType_0_3_0::Read(CAssetsSaveLoadContext* pLoadingContext, const CTuaType_0_3_0& TuaType, CAsset_Skeleton& SysType)
{
	CAsset::CTuaType_0_3_0::Read(pLoadingContext, TuaType, SysType);

	{
		const CAsset_Skeleton::CBone::CTuaType_0_3_0* pData = (const CAsset_Skeleton::CBone::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Bone.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Bone.m_Size);
		SysType.m_Bone.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Bone[i]);
		}
	}
	
	{
		const CAsset_Skeleton::CLayer::CTuaType_0_3_0* pData = (const CAsset_Skeleton::CLayer::CTuaType_0_3_0*) pLoadingContext->ArchiveFile()->GetData(TuaType.m_Layer.m_Data);
		uint32 Size = pLoadingContext->ArchiveFile()->ReadUInt32(TuaType.m_Layer.m_Size);
		SysType.m_Layer.resize(Size);
		for(uint32 i=0; i<Size; i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_3_0::Read(pLoadingContext, pData[i], SysType.m_Layer[i]);
		}
	}
	
}


void CAsset_Skeleton::CBone::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CBone& SysType, CTuaType_0_3_0& TuaType)
{
	CSubPath::CTuaType::Write(pLoadingContext->ArchiveFile(), SysType.m_Parent, TuaType.m_Parent);
	TuaType.m_Length = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Length);
	TuaType.m_Anchor = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Anchor);
	TuaType.m_Translation.m_X = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.x);
	TuaType.m_Translation.m_Y = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Translation.y);
	TuaType.m_Angle = pLoadingContext->ArchiveFile()->WriteFloat(SysType.m_Angle);
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
	TuaType.m_Color = pLoadingContext->ArchiveFile()->WriteColor(SysType.m_Color);
}

void CAsset_Skeleton::CLayer::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton::CLayer& SysType, CTuaType_0_3_0& TuaType)
{
	TuaType.m_Name = pLoadingContext->ArchiveFile()->AddString(SysType.m_Name.buffer());
}

void CAsset_Skeleton::CTuaType_0_3_0::Write(CAssetsSaveLoadContext* pLoadingContext, const CAsset_Skeleton& SysType, CTuaType_0_3_0& TuaType)
{
	CAsset::CTuaType_0_3_0::Write(pLoadingContext, SysType, TuaType);

	{
		TuaType.m_Bone.m_Size = SysType.m_Bone.size();
		CAsset_Skeleton::CBone::CTuaType_0_3_0* pData = new CAsset_Skeleton::CBone::CTuaType_0_3_0[SysType.m_Bone.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_3_0)*SysType.m_Bone.size());
		for(unsigned int i=0; i<SysType.m_Bone.size(); i++)
		{
			CAsset_Skeleton::CBone::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Bone[i], pData[i]);
		}
		TuaType.m_Bone.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CBone::CTuaType_0_3_0)*SysType.m_Bone.size());
		delete[] pData;
	}
	{
		TuaType.m_Layer.m_Size = SysType.m_Layer.size();
		CAsset_Skeleton::CLayer::CTuaType_0_3_0* pData = new CAsset_Skeleton::CLayer::CTuaType_0_3_0[SysType.m_Layer.size()];
		mem_zero((void*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_3_0)*SysType.m_Layer.size());
		for(unsigned int i=0; i<SysType.m_Layer.size(); i++)
		{
			CAsset_Skeleton::CLayer::CTuaType_0_3_0::Write(pLoadingContext, SysType.m_Layer[i], pData[i]);
		}
		TuaType.m_Layer.m_Data = pLoadingContext->ArchiveFile()->AddData((uint8*) pData, sizeof(CAsset_Skeleton::CLayer::CTuaType_0_3_0)*SysType.m_Layer.size());
		delete[] pData;
	}
}

template<>
int CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, int DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_ARRAYSIZE:
			return GetBoneArraySize();
		case LAYER_ARRAYSIZE:
			return GetLayerArraySize();
	}
	return CAsset::GetValue<int>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, int Value)
{
	switch(ValueType)
	{
		case BONE_ARRAYSIZE:
			SetBoneArraySize(Value);
			return true;
		case LAYER_ARRAYSIZE:
			SetLayerArraySize(Value);
			return true;
	}
	return CAsset::SetValue<int>(ValueType, SubPath, Value);
}

template<>
const char* CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, const char* DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_NAME:
			return GetBoneName(SubPath);
		case LAYER_NAME:
			return GetLayerName(SubPath);
	}
	return CAsset::GetValue<const char*>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, const char* Value)
{
	switch(ValueType)
	{
		case BONE_NAME:
			SetBoneName(SubPath, Value);
			return true;
		case LAYER_NAME:
			SetLayerName(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<const char*>(ValueType, SubPath, Value);
}

template<>
float CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, float DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_LENGTH:
			return GetBoneLength(SubPath);
		case BONE_ANCHOR:
			return GetBoneAnchor(SubPath);
		case BONE_TRANSLATION_X:
			return GetBoneTranslationX(SubPath);
		case BONE_TRANSLATION_Y:
			return GetBoneTranslationY(SubPath);
		case BONE_ANGLE:
			return GetBoneAngle(SubPath);
	}
	return CAsset::GetValue<float>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, float Value)
{
	switch(ValueType)
	{
		case BONE_LENGTH:
			SetBoneLength(SubPath, Value);
			return true;
		case BONE_ANCHOR:
			SetBoneAnchor(SubPath, Value);
			return true;
		case BONE_TRANSLATION_X:
			SetBoneTranslationX(SubPath, Value);
			return true;
		case BONE_TRANSLATION_Y:
			SetBoneTranslationY(SubPath, Value);
			return true;
		case BONE_ANGLE:
			SetBoneAngle(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<float>(ValueType, SubPath, Value);
}

template<>
vec2 CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, vec2 DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_TRANSLATION:
			return GetBoneTranslation(SubPath);
	}
	return CAsset::GetValue<vec2>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, vec2 Value)
{
	switch(ValueType)
	{
		case BONE_TRANSLATION:
			SetBoneTranslation(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec2>(ValueType, SubPath, Value);
}

template<>
vec4 CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, vec4 DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_COLOR:
			return GetBoneColor(SubPath);
	}
	return CAsset::GetValue<vec4>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, vec4 Value)
{
	switch(ValueType)
	{
		case BONE_COLOR:
			SetBoneColor(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<vec4>(ValueType, SubPath, Value);
}

template<>
CSubPath CAsset_Skeleton::GetValue(int ValueType, const CSubPath& SubPath, CSubPath DefaultValue) const
{
	switch(ValueType)
	{
		case BONE_PARENT:
			return GetBoneParent(SubPath);
	}
	return CAsset::GetValue<CSubPath>(ValueType, SubPath, DefaultValue);
}

template<>
bool CAsset_Skeleton::SetValue(int ValueType, const CSubPath& SubPath, CSubPath Value)
{
	switch(ValueType)
	{
		case BONE_PARENT:
			SetBoneParent(SubPath, Value);
			return true;
	}
	return CAsset::SetValue<CSubPath>(ValueType, SubPath, Value);
}

int CAsset_Skeleton::AddSubItem(int Type, const CSubPath& SubPath)
{
	switch(Type)
	{
		case TYPE_BONE:
			return AddBone();
		case TYPE_LAYER:
			return AddLayer();
	}
	return -1;
}

int CAsset_Skeleton::AddSubItemAt(int Type, const CSubPath& SubPath, int Index)
{
	switch(Type)
	{
		case TYPE_BONE:
			AddAtBone(Index);
			return Index;
		case TYPE_LAYER:
			AddAtLayer(Index);
			return Index;
	}
	return -1;
}

void CAsset_Skeleton::DeleteSubItem(const CSubPath& SubPath)
{
	switch(SubPath.GetType())
	{
		case TYPE_BONE:
			DeleteBone(SubPath);
			break;
		case TYPE_LAYER:
			DeleteLayer(SubPath);
			break;
	}
}

void CAsset_Skeleton::RelMoveSubItem(CSubPath& SubPath, int RelMove)
{
	switch(SubPath.GetType())
	{
		case TYPE_BONE:
			RelMoveBone(SubPath, RelMove);
			break;
		case TYPE_LAYER:
			RelMoveLayer(SubPath, RelMove);
			break;
	}
}


